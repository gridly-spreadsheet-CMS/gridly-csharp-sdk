/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// CreateColumn
    /// </summary>
    [DataContract]
    public partial class CreateColumn :  IEquatable<CreateColumn>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SingleLine for value: singleLine
            /// </summary>
            [EnumMember(Value = "singleLine")]
            SingleLine = 1,

            /// <summary>
            /// Enum MultipleLines for value: multipleLines
            /// </summary>
            [EnumMember(Value = "multipleLines")]
            MultipleLines = 2,

            /// <summary>
            /// Enum RichText for value: richText
            /// </summary>
            [EnumMember(Value = "richText")]
            RichText = 3,

            /// <summary>
            /// Enum Markdown for value: markdown
            /// </summary>
            [EnumMember(Value = "markdown")]
            Markdown = 4,

            /// <summary>
            /// Enum SingleSelection for value: singleSelection
            /// </summary>
            [EnumMember(Value = "singleSelection")]
            SingleSelection = 5,

            /// <summary>
            /// Enum MultipleSelections for value: multipleSelections
            /// </summary>
            [EnumMember(Value = "multipleSelections")]
            MultipleSelections = 6,

            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 7,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 8,

            /// <summary>
            /// Enum Datetime for value: datetime
            /// </summary>
            [EnumMember(Value = "datetime")]
            Datetime = 9,

            /// <summary>
            /// Enum Files for value: files
            /// </summary>
            [EnumMember(Value = "files")]
            Files = 10,

            /// <summary>
            /// Enum Reference for value: reference
            /// </summary>
            [EnumMember(Value = "reference")]
            Reference = 11,

            /// <summary>
            /// Enum Lookup for value: lookup
            /// </summary>
            [EnumMember(Value = "lookup")]
            Lookup = 12,

            /// <summary>
            /// Enum Language for value: language
            /// </summary>
            [EnumMember(Value = "language")]
            Language = 13,

            /// <summary>
            /// Enum Json for value: json
            /// </summary>
            [EnumMember(Value = "json")]
            Json = 14,

            /// <summary>
            /// Enum Yaml for value: yaml
            /// </summary>
            [EnumMember(Value = "yaml")]
            Yaml = 15,

            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            [EnumMember(Value = "html")]
            Html = 16,

            /// <summary>
            /// Enum Formula for value: formula
            /// </summary>
            [EnumMember(Value = "formula")]
            Formula = 17,

            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 18

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines LanguageCode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageCodeEnum
        {
            /// <summary>
            /// Enum EnUS for value: enUS
            /// </summary>
            [EnumMember(Value = "enUS")]
            EnUS = 1,

            /// <summary>
            /// Enum ArSA for value: arSA
            /// </summary>
            [EnumMember(Value = "arSA")]
            ArSA = 2,

            /// <summary>
            /// Enum CaES for value: caES
            /// </summary>
            [EnumMember(Value = "caES")]
            CaES = 3,

            /// <summary>
            /// Enum ZhCN for value: zhCN
            /// </summary>
            [EnumMember(Value = "zhCN")]
            ZhCN = 4,

            /// <summary>
            /// Enum ZhTW for value: zhTW
            /// </summary>
            [EnumMember(Value = "zhTW")]
            ZhTW = 5,

            /// <summary>
            /// Enum DeDE for value: deDE
            /// </summary>
            [EnumMember(Value = "deDE")]
            DeDE = 6,

            /// <summary>
            /// Enum ItIT for value: itIT
            /// </summary>
            [EnumMember(Value = "itIT")]
            ItIT = 7,

            /// <summary>
            /// Enum JaJP for value: jaJP
            /// </summary>
            [EnumMember(Value = "jaJP")]
            JaJP = 8,

            /// <summary>
            /// Enum KoKR for value: koKR
            /// </summary>
            [EnumMember(Value = "koKR")]
            KoKR = 9,

            /// <summary>
            /// Enum PlPL for value: plPL
            /// </summary>
            [EnumMember(Value = "plPL")]
            PlPL = 10,

            /// <summary>
            /// Enum PtAO for value: ptAO
            /// </summary>
            [EnumMember(Value = "ptAO")]
            PtAO = 11,

            /// <summary>
            /// Enum PtBR for value: ptBR
            /// </summary>
            [EnumMember(Value = "ptBR")]
            PtBR = 12,

            /// <summary>
            /// Enum RuRU for value: ruRU
            /// </summary>
            [EnumMember(Value = "ruRU")]
            RuRU = 13,

            /// <summary>
            /// Enum EsMX for value: esMX
            /// </summary>
            [EnumMember(Value = "esMX")]
            EsMX = 14,

            /// <summary>
            /// Enum EsLA for value: esLA
            /// </summary>
            [EnumMember(Value = "esLA")]
            EsLA = 15,

            /// <summary>
            /// Enum EsES for value: esES
            /// </summary>
            [EnumMember(Value = "esES")]
            EsES = 16,

            /// <summary>
            /// Enum BnBD for value: bnBD
            /// </summary>
            [EnumMember(Value = "bnBD")]
            BnBD = 17,

            /// <summary>
            /// Enum BgBG for value: bgBG
            /// </summary>
            [EnumMember(Value = "bgBG")]
            BgBG = 18,

            /// <summary>
            /// Enum ZhHK for value: zhHK
            /// </summary>
            [EnumMember(Value = "zhHK")]
            ZhHK = 19,

            /// <summary>
            /// Enum CsCZ for value: csCZ
            /// </summary>
            [EnumMember(Value = "csCZ")]
            CsCZ = 20,

            /// <summary>
            /// Enum DaDK for value: daDK
            /// </summary>
            [EnumMember(Value = "daDK")]
            DaDK = 21,

            /// <summary>
            /// Enum KlGL for value: klGL
            /// </summary>
            [EnumMember(Value = "klGL")]
            KlGL = 22,

            /// <summary>
            /// Enum NlNL for value: nlNL
            /// </summary>
            [EnumMember(Value = "nlNL")]
            NlNL = 23,

            /// <summary>
            /// Enum FiFI for value: fiFI
            /// </summary>
            [EnumMember(Value = "fiFI")]
            FiFI = 24,

            /// <summary>
            /// Enum FrFR for value: frFR
            /// </summary>
            [EnumMember(Value = "frFR")]
            FrFR = 25,

            /// <summary>
            /// Enum FrCA for value: frCA
            /// </summary>
            [EnumMember(Value = "frCA")]
            FrCA = 26,

            /// <summary>
            /// Enum ElGR for value: elGR
            /// </summary>
            [EnumMember(Value = "elGR")]
            ElGR = 27,

            /// <summary>
            /// Enum HeIL for value: heIL
            /// </summary>
            [EnumMember(Value = "heIL")]
            HeIL = 28,

            /// <summary>
            /// Enum HiIN for value: hiIN
            /// </summary>
            [EnumMember(Value = "hiIN")]
            HiIN = 29,

            /// <summary>
            /// Enum HuHU for value: huHU
            /// </summary>
            [EnumMember(Value = "huHU")]
            HuHU = 30,

            /// <summary>
            /// Enum IdID for value: idID
            /// </summary>
            [EnumMember(Value = "idID")]
            IdID = 31,

            /// <summary>
            /// Enum JwID for value: jwID
            /// </summary>
            [EnumMember(Value = "jwID")]
            JwID = 32,

            /// <summary>
            /// Enum LvLV for value: lvLV
            /// </summary>
            [EnumMember(Value = "lvLV")]
            LvLV = 33,

            /// <summary>
            /// Enum MsMY for value: msMY
            /// </summary>
            [EnumMember(Value = "msMY")]
            MsMY = 34,

            /// <summary>
            /// Enum NoNO for value: noNO
            /// </summary>
            [EnumMember(Value = "noNO")]
            NoNO = 35,

            /// <summary>
            /// Enum PtPT for value: ptPT
            /// </summary>
            [EnumMember(Value = "ptPT")]
            PtPT = 36,

            /// <summary>
            /// Enum RoRO for value: roRO
            /// </summary>
            [EnumMember(Value = "roRO")]
            RoRO = 37,

            /// <summary>
            /// Enum SkSK for value: skSK
            /// </summary>
            [EnumMember(Value = "skSK")]
            SkSK = 38,

            /// <summary>
            /// Enum SvSE for value: svSE
            /// </summary>
            [EnumMember(Value = "svSE")]
            SvSE = 39,

            /// <summary>
            /// Enum TlPH for value: tlPH
            /// </summary>
            [EnumMember(Value = "tlPH")]
            TlPH = 40,

            /// <summary>
            /// Enum ThTH for value: thTH
            /// </summary>
            [EnumMember(Value = "thTH")]
            ThTH = 41,

            /// <summary>
            /// Enum TrTR for value: trTR
            /// </summary>
            [EnumMember(Value = "trTR")]
            TrTR = 42,

            /// <summary>
            /// Enum UkUA for value: ukUA
            /// </summary>
            [EnumMember(Value = "ukUA")]
            UkUA = 43,

            /// <summary>
            /// Enum UrIN for value: urIN
            /// </summary>
            [EnumMember(Value = "urIN")]
            UrIN = 44,

            /// <summary>
            /// Enum ViVN for value: viVN
            /// </summary>
            [EnumMember(Value = "viVN")]
            ViVN = 45,

            /// <summary>
            /// Enum AfZA for value: afZA
            /// </summary>
            [EnumMember(Value = "afZA")]
            AfZA = 46,

            /// <summary>
            /// Enum ArAE for value: arAE
            /// </summary>
            [EnumMember(Value = "arAE")]
            ArAE = 47,

            /// <summary>
            /// Enum ArBH for value: arBH
            /// </summary>
            [EnumMember(Value = "arBH")]
            ArBH = 48,

            /// <summary>
            /// Enum ArDZ for value: arDZ
            /// </summary>
            [EnumMember(Value = "arDZ")]
            ArDZ = 49,

            /// <summary>
            /// Enum ArEG for value: arEG
            /// </summary>
            [EnumMember(Value = "arEG")]
            ArEG = 50,

            /// <summary>
            /// Enum ArIQ for value: arIQ
            /// </summary>
            [EnumMember(Value = "arIQ")]
            ArIQ = 51,

            /// <summary>
            /// Enum ArJO for value: arJO
            /// </summary>
            [EnumMember(Value = "arJO")]
            ArJO = 52,

            /// <summary>
            /// Enum ArKW for value: arKW
            /// </summary>
            [EnumMember(Value = "arKW")]
            ArKW = 53,

            /// <summary>
            /// Enum ArLB for value: arLB
            /// </summary>
            [EnumMember(Value = "arLB")]
            ArLB = 54,

            /// <summary>
            /// Enum ArLY for value: arLY
            /// </summary>
            [EnumMember(Value = "arLY")]
            ArLY = 55,

            /// <summary>
            /// Enum ArMA for value: arMA
            /// </summary>
            [EnumMember(Value = "arMA")]
            ArMA = 56,

            /// <summary>
            /// Enum ArOM for value: arOM
            /// </summary>
            [EnumMember(Value = "arOM")]
            ArOM = 57,

            /// <summary>
            /// Enum ArQA for value: arQA
            /// </summary>
            [EnumMember(Value = "arQA")]
            ArQA = 58,

            /// <summary>
            /// Enum ArSY for value: arSY
            /// </summary>
            [EnumMember(Value = "arSY")]
            ArSY = 59,

            /// <summary>
            /// Enum ArTN for value: arTN
            /// </summary>
            [EnumMember(Value = "arTN")]
            ArTN = 60,

            /// <summary>
            /// Enum ArYE for value: arYE
            /// </summary>
            [EnumMember(Value = "arYE")]
            ArYE = 61,

            /// <summary>
            /// Enum AzAZ for value: azAZ
            /// </summary>
            [EnumMember(Value = "azAZ")]
            AzAZ = 62,

            /// <summary>
            /// Enum BeBY for value: beBY
            /// </summary>
            [EnumMember(Value = "beBY")]
            BeBY = 63,

            /// <summary>
            /// Enum BsBA for value: bsBA
            /// </summary>
            [EnumMember(Value = "bsBA")]
            BsBA = 64,

            /// <summary>
            /// Enum CyGB for value: cyGB
            /// </summary>
            [EnumMember(Value = "cyGB")]
            CyGB = 65,

            /// <summary>
            /// Enum DeAT for value: deAT
            /// </summary>
            [EnumMember(Value = "deAT")]
            DeAT = 66,

            /// <summary>
            /// Enum DeCH for value: deCH
            /// </summary>
            [EnumMember(Value = "deCH")]
            DeCH = 67,

            /// <summary>
            /// Enum DeLI for value: deLI
            /// </summary>
            [EnumMember(Value = "deLI")]
            DeLI = 68,

            /// <summary>
            /// Enum DeLU for value: deLU
            /// </summary>
            [EnumMember(Value = "deLU")]
            DeLU = 69,

            /// <summary>
            /// Enum DvMV for value: dvMV
            /// </summary>
            [EnumMember(Value = "dvMV")]
            DvMV = 70,

            /// <summary>
            /// Enum EnAU for value: enAU
            /// </summary>
            [EnumMember(Value = "enAU")]
            EnAU = 71,

            /// <summary>
            /// Enum EnBZ for value: enBZ
            /// </summary>
            [EnumMember(Value = "enBZ")]
            EnBZ = 72,

            /// <summary>
            /// Enum EnCA for value: enCA
            /// </summary>
            [EnumMember(Value = "enCA")]
            EnCA = 73,

            /// <summary>
            /// Enum EnGB for value: enGB
            /// </summary>
            [EnumMember(Value = "enGB")]
            EnGB = 74,

            /// <summary>
            /// Enum EnIE for value: enIE
            /// </summary>
            [EnumMember(Value = "enIE")]
            EnIE = 75,

            /// <summary>
            /// Enum EnJM for value: enJM
            /// </summary>
            [EnumMember(Value = "enJM")]
            EnJM = 76,

            /// <summary>
            /// Enum EnNZ for value: enNZ
            /// </summary>
            [EnumMember(Value = "enNZ")]
            EnNZ = 77,

            /// <summary>
            /// Enum EnPH for value: enPH
            /// </summary>
            [EnumMember(Value = "enPH")]
            EnPH = 78,

            /// <summary>
            /// Enum EnTT for value: enTT
            /// </summary>
            [EnumMember(Value = "enTT")]
            EnTT = 79,

            /// <summary>
            /// Enum EnZA for value: enZA
            /// </summary>
            [EnumMember(Value = "enZA")]
            EnZA = 80,

            /// <summary>
            /// Enum EnZW for value: enZW
            /// </summary>
            [EnumMember(Value = "enZW")]
            EnZW = 81,

            /// <summary>
            /// Enum EnSG for value: enSG
            /// </summary>
            [EnumMember(Value = "enSG")]
            EnSG = 82,

            /// <summary>
            /// Enum EnIN for value: enIN
            /// </summary>
            [EnumMember(Value = "enIN")]
            EnIN = 83,

            /// <summary>
            /// Enum EnGH for value: enGH
            /// </summary>
            [EnumMember(Value = "enGH")]
            EnGH = 84,

            /// <summary>
            /// Enum EnRW for value: enRW
            /// </summary>
            [EnumMember(Value = "enRW")]
            EnRW = 85,

            /// <summary>
            /// Enum EnZM for value: enZM
            /// </summary>
            [EnumMember(Value = "enZM")]
            EnZM = 86,

            /// <summary>
            /// Enum EnKE for value: enKE
            /// </summary>
            [EnumMember(Value = "enKE")]
            EnKE = 87,

            /// <summary>
            /// Enum EnNG for value: enNG
            /// </summary>
            [EnumMember(Value = "enNG")]
            EnNG = 88,

            /// <summary>
            /// Enum EsAR for value: esAR
            /// </summary>
            [EnumMember(Value = "esAR")]
            EsAR = 89,

            /// <summary>
            /// Enum EsBO for value: esBO
            /// </summary>
            [EnumMember(Value = "esBO")]
            EsBO = 90,

            /// <summary>
            /// Enum EsCL for value: esCL
            /// </summary>
            [EnumMember(Value = "esCL")]
            EsCL = 91,

            /// <summary>
            /// Enum EsCO for value: esCO
            /// </summary>
            [EnumMember(Value = "esCO")]
            EsCO = 92,

            /// <summary>
            /// Enum EsCR for value: esCR
            /// </summary>
            [EnumMember(Value = "esCR")]
            EsCR = 93,

            /// <summary>
            /// Enum EsDO for value: esDO
            /// </summary>
            [EnumMember(Value = "esDO")]
            EsDO = 94,

            /// <summary>
            /// Enum EsEC for value: esEC
            /// </summary>
            [EnumMember(Value = "esEC")]
            EsEC = 95,

            /// <summary>
            /// Enum EsGT for value: esGT
            /// </summary>
            [EnumMember(Value = "esGT")]
            EsGT = 96,

            /// <summary>
            /// Enum EsHN for value: esHN
            /// </summary>
            [EnumMember(Value = "esHN")]
            EsHN = 97,

            /// <summary>
            /// Enum EsNI for value: esNI
            /// </summary>
            [EnumMember(Value = "esNI")]
            EsNI = 98,

            /// <summary>
            /// Enum EsPA for value: esPA
            /// </summary>
            [EnumMember(Value = "esPA")]
            EsPA = 99,

            /// <summary>
            /// Enum EsPE for value: esPE
            /// </summary>
            [EnumMember(Value = "esPE")]
            EsPE = 100,

            /// <summary>
            /// Enum EsPR for value: esPR
            /// </summary>
            [EnumMember(Value = "esPR")]
            EsPR = 101,

            /// <summary>
            /// Enum EsPY for value: esPY
            /// </summary>
            [EnumMember(Value = "esPY")]
            EsPY = 102,

            /// <summary>
            /// Enum EsSV for value: esSV
            /// </summary>
            [EnumMember(Value = "esSV")]
            EsSV = 103,

            /// <summary>
            /// Enum EsUY for value: esUY
            /// </summary>
            [EnumMember(Value = "esUY")]
            EsUY = 104,

            /// <summary>
            /// Enum EsVE for value: esVE
            /// </summary>
            [EnumMember(Value = "esVE")]
            EsVE = 105,

            /// <summary>
            /// Enum EtEE for value: etEE
            /// </summary>
            [EnumMember(Value = "etEE")]
            EtEE = 106,

            /// <summary>
            /// Enum EuES for value: euES
            /// </summary>
            [EnumMember(Value = "euES")]
            EuES = 107,

            /// <summary>
            /// Enum FaIR for value: faIR
            /// </summary>
            [EnumMember(Value = "faIR")]
            FaIR = 108,

            /// <summary>
            /// Enum FoFO for value: foFO
            /// </summary>
            [EnumMember(Value = "foFO")]
            FoFO = 109,

            /// <summary>
            /// Enum FrBE for value: frBE
            /// </summary>
            [EnumMember(Value = "frBE")]
            FrBE = 110,

            /// <summary>
            /// Enum FrCH for value: frCH
            /// </summary>
            [EnumMember(Value = "frCH")]
            FrCH = 111,

            /// <summary>
            /// Enum FrLU for value: frLU
            /// </summary>
            [EnumMember(Value = "frLU")]
            FrLU = 112,

            /// <summary>
            /// Enum FrMC for value: frMC
            /// </summary>
            [EnumMember(Value = "frMC")]
            FrMC = 113,

            /// <summary>
            /// Enum GlES for value: glES
            /// </summary>
            [EnumMember(Value = "glES")]
            GlES = 114,

            /// <summary>
            /// Enum GuIN for value: guIN
            /// </summary>
            [EnumMember(Value = "guIN")]
            GuIN = 115,

            /// <summary>
            /// Enum HrBA for value: hrBA
            /// </summary>
            [EnumMember(Value = "hrBA")]
            HrBA = 116,

            /// <summary>
            /// Enum HrHR for value: hrHR
            /// </summary>
            [EnumMember(Value = "hrHR")]
            HrHR = 117,

            /// <summary>
            /// Enum HyAM for value: hyAM
            /// </summary>
            [EnumMember(Value = "hyAM")]
            HyAM = 118,

            /// <summary>
            /// Enum IsIS for value: isIS
            /// </summary>
            [EnumMember(Value = "isIS")]
            IsIS = 119,

            /// <summary>
            /// Enum ItCH for value: itCH
            /// </summary>
            [EnumMember(Value = "itCH")]
            ItCH = 120,

            /// <summary>
            /// Enum KaGE for value: kaGE
            /// </summary>
            [EnumMember(Value = "kaGE")]
            KaGE = 121,

            /// <summary>
            /// Enum KkKZ for value: kkKZ
            /// </summary>
            [EnumMember(Value = "kkKZ")]
            KkKZ = 122,

            /// <summary>
            /// Enum KnIN for value: knIN
            /// </summary>
            [EnumMember(Value = "knIN")]
            KnIN = 123,

            /// <summary>
            /// Enum KokIN for value: kokIN
            /// </summary>
            [EnumMember(Value = "kokIN")]
            KokIN = 124,

            /// <summary>
            /// Enum KyKG for value: kyKG
            /// </summary>
            [EnumMember(Value = "kyKG")]
            KyKG = 125,

            /// <summary>
            /// Enum LtLT for value: ltLT
            /// </summary>
            [EnumMember(Value = "ltLT")]
            LtLT = 126,

            /// <summary>
            /// Enum MiNZ for value: miNZ
            /// </summary>
            [EnumMember(Value = "miNZ")]
            MiNZ = 127,

            /// <summary>
            /// Enum MkMK for value: mkMK
            /// </summary>
            [EnumMember(Value = "mkMK")]
            MkMK = 128,

            /// <summary>
            /// Enum MnMN for value: mnMN
            /// </summary>
            [EnumMember(Value = "mnMN")]
            MnMN = 129,

            /// <summary>
            /// Enum MrIN for value: mrIN
            /// </summary>
            [EnumMember(Value = "mrIN")]
            MrIN = 130,

            /// <summary>
            /// Enum MsBN for value: msBN
            /// </summary>
            [EnumMember(Value = "msBN")]
            MsBN = 131,

            /// <summary>
            /// Enum MtMT for value: mtMT
            /// </summary>
            [EnumMember(Value = "mtMT")]
            MtMT = 132,

            /// <summary>
            /// Enum NbNO for value: nbNO
            /// </summary>
            [EnumMember(Value = "nbNO")]
            NbNO = 133,

            /// <summary>
            /// Enum NlBE for value: nlBE
            /// </summary>
            [EnumMember(Value = "nlBE")]
            NlBE = 134,

            /// <summary>
            /// Enum NnNO for value: nnNO
            /// </summary>
            [EnumMember(Value = "nnNO")]
            NnNO = 135,

            /// <summary>
            /// Enum NsZA for value: nsZA
            /// </summary>
            [EnumMember(Value = "nsZA")]
            NsZA = 136,

            /// <summary>
            /// Enum PaIN for value: paIN
            /// </summary>
            [EnumMember(Value = "paIN")]
            PaIN = 137,

            /// <summary>
            /// Enum PsAR for value: psAR
            /// </summary>
            [EnumMember(Value = "psAR")]
            PsAR = 138,

            /// <summary>
            /// Enum QuBO for value: quBO
            /// </summary>
            [EnumMember(Value = "quBO")]
            QuBO = 139,

            /// <summary>
            /// Enum QuEC for value: quEC
            /// </summary>
            [EnumMember(Value = "quEC")]
            QuEC = 140,

            /// <summary>
            /// Enum QuPE for value: quPE
            /// </summary>
            [EnumMember(Value = "quPE")]
            QuPE = 141,

            /// <summary>
            /// Enum SaIN for value: saIN
            /// </summary>
            [EnumMember(Value = "saIN")]
            SaIN = 142,

            /// <summary>
            /// Enum SeFI for value: seFI
            /// </summary>
            [EnumMember(Value = "seFI")]
            SeFI = 143,

            /// <summary>
            /// Enum SeNO for value: seNO
            /// </summary>
            [EnumMember(Value = "seNO")]
            SeNO = 144,

            /// <summary>
            /// Enum SeSE for value: seSE
            /// </summary>
            [EnumMember(Value = "seSE")]
            SeSE = 145,

            /// <summary>
            /// Enum SlSI for value: slSI
            /// </summary>
            [EnumMember(Value = "slSI")]
            SlSI = 146,

            /// <summary>
            /// Enum SqAL for value: sqAL
            /// </summary>
            [EnumMember(Value = "sqAL")]
            SqAL = 147,

            /// <summary>
            /// Enum SrBA for value: srBA
            /// </summary>
            [EnumMember(Value = "srBA")]
            SrBA = 148,

            /// <summary>
            /// Enum SrRS for value: srRS
            /// </summary>
            [EnumMember(Value = "srRS")]
            SrRS = 149,

            /// <summary>
            /// Enum SrME for value: srME
            /// </summary>
            [EnumMember(Value = "srME")]
            SrME = 150,

            /// <summary>
            /// Enum SvFI for value: svFI
            /// </summary>
            [EnumMember(Value = "svFI")]
            SvFI = 151,

            /// <summary>
            /// Enum SwKE for value: swKE
            /// </summary>
            [EnumMember(Value = "swKE")]
            SwKE = 152,

            /// <summary>
            /// Enum SyrSY for value: syrSY
            /// </summary>
            [EnumMember(Value = "syrSY")]
            SyrSY = 153,

            /// <summary>
            /// Enum TaIN for value: taIN
            /// </summary>
            [EnumMember(Value = "taIN")]
            TaIN = 154,

            /// <summary>
            /// Enum TeIN for value: teIN
            /// </summary>
            [EnumMember(Value = "teIN")]
            TeIN = 155,

            /// <summary>
            /// Enum TnZA for value: tnZA
            /// </summary>
            [EnumMember(Value = "tnZA")]
            TnZA = 156,

            /// <summary>
            /// Enum TtRU for value: ttRU
            /// </summary>
            [EnumMember(Value = "ttRU")]
            TtRU = 157,

            /// <summary>
            /// Enum UrPK for value: urPK
            /// </summary>
            [EnumMember(Value = "urPK")]
            UrPK = 158,

            /// <summary>
            /// Enum UzUZ for value: uzUZ
            /// </summary>
            [EnumMember(Value = "uzUZ")]
            UzUZ = 159,

            /// <summary>
            /// Enum XhZA for value: xhZA
            /// </summary>
            [EnumMember(Value = "xhZA")]
            XhZA = 160,

            /// <summary>
            /// Enum ZhMO for value: zhMO
            /// </summary>
            [EnumMember(Value = "zhMO")]
            ZhMO = 161,

            /// <summary>
            /// Enum ZhSG for value: zhSG
            /// </summary>
            [EnumMember(Value = "zhSG")]
            ZhSG = 162,

            /// <summary>
            /// Enum ZuZA for value: zuZA
            /// </summary>
            [EnumMember(Value = "zuZA")]
            ZuZA = 163,

            /// <summary>
            /// Enum Am for value: am
            /// </summary>
            [EnumMember(Value = "am")]
            Am = 164,

            /// <summary>
            /// Enum Hy for value: hy
            /// </summary>
            [EnumMember(Value = "hy")]
            Hy = 165,

            /// <summary>
            /// Enum Az for value: az
            /// </summary>
            [EnumMember(Value = "az")]
            Az = 166,

            /// <summary>
            /// Enum Bn for value: bn
            /// </summary>
            [EnumMember(Value = "bn")]
            Bn = 167,

            /// <summary>
            /// Enum Bs for value: bs
            /// </summary>
            [EnumMember(Value = "bs")]
            Bs = 168,

            /// <summary>
            /// Enum Ca for value: ca
            /// </summary>
            [EnumMember(Value = "ca")]
            Ca = 169,

            /// <summary>
            /// Enum Hr for value: hr
            /// </summary>
            [EnumMember(Value = "hr")]
            Hr = 170,

            /// <summary>
            /// Enum Da for value: da
            /// </summary>
            [EnumMember(Value = "da")]
            Da = 171,

            /// <summary>
            /// Enum Kl for value: kl
            /// </summary>
            [EnumMember(Value = "kl")]
            Kl = 172,

            /// <summary>
            /// Enum Nl for value: nl
            /// </summary>
            [EnumMember(Value = "nl")]
            Nl = 173,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 174,

            /// <summary>
            /// Enum Fi for value: fi
            /// </summary>
            [EnumMember(Value = "fi")]
            Fi = 175,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 176,

            /// <summary>
            /// Enum Hi for value: hi
            /// </summary>
            [EnumMember(Value = "hi")]
            Hi = 177,

            /// <summary>
            /// Enum Hu for value: hu
            /// </summary>
            [EnumMember(Value = "hu")]
            Hu = 178,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            [EnumMember(Value = "id")]
            Id = 179,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            [EnumMember(Value = "it")]
            It = 180,

            /// <summary>
            /// Enum Km for value: km
            /// </summary>
            [EnumMember(Value = "km")]
            Km = 181,

            /// <summary>
            /// Enum Mi for value: mi
            /// </summary>
            [EnumMember(Value = "mi")]
            Mi = 182,

            /// <summary>
            /// Enum Ps for value: ps
            /// </summary>
            [EnumMember(Value = "ps")]
            Ps = 183,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru = 184,

            /// <summary>
            /// Enum Sl for value: sl
            /// </summary>
            [EnumMember(Value = "sl")]
            Sl = 185,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            [EnumMember(Value = "es")]
            Es = 186,

            /// <summary>
            /// Enum Sw for value: sw
            /// </summary>
            [EnumMember(Value = "sw")]
            Sw = 187,

            /// <summary>
            /// Enum Ta for value: ta
            /// </summary>
            [EnumMember(Value = "ta")]
            Ta = 188,

            /// <summary>
            /// Enum Ur for value: ur
            /// </summary>
            [EnumMember(Value = "ur")]
            Ur = 189,

            /// <summary>
            /// Enum Af for value: af
            /// </summary>
            [EnumMember(Value = "af")]
            Af = 190,

            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            [EnumMember(Value = "et")]
            Et = 191,

            /// <summary>
            /// Enum Gl for value: gl
            /// </summary>
            [EnumMember(Value = "gl")]
            Gl = 192,

            /// <summary>
            /// Enum Ja for value: ja
            /// </summary>
            [EnumMember(Value = "ja")]
            Ja = 193,

            /// <summary>
            /// Enum Kk for value: kk
            /// </summary>
            [EnumMember(Value = "kk")]
            Kk = 194,

            /// <summary>
            /// Enum Ky for value: ky
            /// </summary>
            [EnumMember(Value = "ky")]
            Ky = 195,

            /// <summary>
            /// Enum Mk for value: mk
            /// </summary>
            [EnumMember(Value = "mk")]
            Mk = 196,

            /// <summary>
            /// Enum Ms for value: ms
            /// </summary>
            [EnumMember(Value = "ms")]
            Ms = 197,

            /// <summary>
            /// Enum Se for value: se
            /// </summary>
            [EnumMember(Value = "se")]
            Se = 198,

            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            [EnumMember(Value = "pl")]
            Pl = 199,

            /// <summary>
            /// Enum Pa for value: pa
            /// </summary>
            [EnumMember(Value = "pa")]
            Pa = 200,

            /// <summary>
            /// Enum Ro for value: ro
            /// </summary>
            [EnumMember(Value = "ro")]
            Ro = 201,

            /// <summary>
            /// Enum Sk for value: sk
            /// </summary>
            [EnumMember(Value = "sk")]
            Sk = 202,

            /// <summary>
            /// Enum Sv for value: sv
            /// </summary>
            [EnumMember(Value = "sv")]
            Sv = 203,

            /// <summary>
            /// Enum Tt for value: tt
            /// </summary>
            [EnumMember(Value = "tt")]
            Tt = 204,

            /// <summary>
            /// Enum Te for value: te
            /// </summary>
            [EnumMember(Value = "te")]
            Te = 205,

            /// <summary>
            /// Enum Tr for value: tr
            /// </summary>
            [EnumMember(Value = "tr")]
            Tr = 206,

            /// <summary>
            /// Enum Uz for value: uz
            /// </summary>
            [EnumMember(Value = "uz")]
            Uz = 207,

            /// <summary>
            /// Enum Vi for value: vi
            /// </summary>
            [EnumMember(Value = "vi")]
            Vi = 208,

            /// <summary>
            /// Enum Eu for value: eu
            /// </summary>
            [EnumMember(Value = "eu")]
            Eu = 209,

            /// <summary>
            /// Enum Be for value: be
            /// </summary>
            [EnumMember(Value = "be")]
            Be = 210,

            /// <summary>
            /// Enum Cs for value: cs
            /// </summary>
            [EnumMember(Value = "cs")]
            Cs = 211,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 212,

            /// <summary>
            /// Enum Gu for value: gu
            /// </summary>
            [EnumMember(Value = "gu")]
            Gu = 213,

            /// <summary>
            /// Enum He for value: he
            /// </summary>
            [EnumMember(Value = "he")]
            He = 214,

            /// <summary>
            /// Enum Is for value: is
            /// </summary>
            [EnumMember(Value = "is")]
            Is = 215,

            /// <summary>
            /// Enum Ko for value: ko
            /// </summary>
            [EnumMember(Value = "ko")]
            Ko = 216,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 217,

            /// <summary>
            /// Enum Mr for value: mr
            /// </summary>
            [EnumMember(Value = "mr")]
            Mr = 218,

            /// <summary>
            /// Enum Mn for value: mn
            /// </summary>
            [EnumMember(Value = "mn")]
            Mn = 219,

            /// <summary>
            /// Enum Nb for value: nb
            /// </summary>
            [EnumMember(Value = "nb")]
            Nb = 220,

            /// <summary>
            /// Enum Nn for value: nn
            /// </summary>
            [EnumMember(Value = "nn")]
            Nn = 221,

            /// <summary>
            /// Enum Pt for value: pt
            /// </summary>
            [EnumMember(Value = "pt")]
            Pt = 222,

            /// <summary>
            /// Enum Sa for value: sa
            /// </summary>
            [EnumMember(Value = "sa")]
            Sa = 223,

            /// <summary>
            /// Enum Tn for value: tn
            /// </summary>
            [EnumMember(Value = "tn")]
            Tn = 224,

            /// <summary>
            /// Enum Uk for value: uk
            /// </summary>
            [EnumMember(Value = "uk")]
            Uk = 225,

            /// <summary>
            /// Enum Xh for value: xh
            /// </summary>
            [EnumMember(Value = "xh")]
            Xh = 226,

            /// <summary>
            /// Enum Sq for value: sq
            /// </summary>
            [EnumMember(Value = "sq")]
            Sq = 227,

            /// <summary>
            /// Enum Ar for value: ar
            /// </summary>
            [EnumMember(Value = "ar")]
            Ar = 228,

            /// <summary>
            /// Enum Bg for value: bg
            /// </summary>
            [EnumMember(Value = "bg")]
            Bg = 229,

            /// <summary>
            /// Enum Zh for value: zh
            /// </summary>
            [EnumMember(Value = "zh")]
            Zh = 230,

            /// <summary>
            /// Enum Dv for value: dv
            /// </summary>
            [EnumMember(Value = "dv")]
            Dv = 231,

            /// <summary>
            /// Enum Fo for value: fo
            /// </summary>
            [EnumMember(Value = "fo")]
            Fo = 232,

            /// <summary>
            /// Enum Fa for value: fa
            /// </summary>
            [EnumMember(Value = "fa")]
            Fa = 233,

            /// <summary>
            /// Enum Ka for value: ka
            /// </summary>
            [EnumMember(Value = "ka")]
            Ka = 234,

            /// <summary>
            /// Enum El for value: el
            /// </summary>
            [EnumMember(Value = "el")]
            El = 235,

            /// <summary>
            /// Enum Kn for value: kn
            /// </summary>
            [EnumMember(Value = "kn")]
            Kn = 236,

            /// <summary>
            /// Enum Lv for value: lv
            /// </summary>
            [EnumMember(Value = "lv")]
            Lv = 237,

            /// <summary>
            /// Enum Mt for value: mt
            /// </summary>
            [EnumMember(Value = "mt")]
            Mt = 238,

            /// <summary>
            /// Enum Qu for value: qu
            /// </summary>
            [EnumMember(Value = "qu")]
            Qu = 239,

            /// <summary>
            /// Enum Sr for value: sr
            /// </summary>
            [EnumMember(Value = "sr")]
            Sr = 240,

            /// <summary>
            /// Enum Si for value: si
            /// </summary>
            [EnumMember(Value = "si")]
            Si = 241,

            /// <summary>
            /// Enum Tl for value: tl
            /// </summary>
            [EnumMember(Value = "tl")]
            Tl = 242,

            /// <summary>
            /// Enum Th for value: th
            /// </summary>
            [EnumMember(Value = "th")]
            Th = 243,

            /// <summary>
            /// Enum Cy for value: cy
            /// </summary>
            [EnumMember(Value = "cy")]
            Cy = 244,

            /// <summary>
            /// Enum Zu for value: zu
            /// </summary>
            [EnumMember(Value = "zu")]
            Zu = 245,

            /// <summary>
            /// Enum No for value: no
            /// </summary>
            [EnumMember(Value = "no")]
            No = 246

        }

        /// <summary>
        /// Gets or Sets LanguageCode
        /// </summary>
        [DataMember(Name="languageCode", EmitDefaultValue=true)]
        public LanguageCodeEnum? LanguageCode { get; set; }
        /// <summary>
        /// Defines LocalizationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LocalizationTypeEnum
        {
            /// <summary>
            /// Enum SourceLanguage for value: sourceLanguage
            /// </summary>
            [EnumMember(Value = "sourceLanguage")]
            SourceLanguage = 1,

            /// <summary>
            /// Enum TargetLanguage for value: targetLanguage
            /// </summary>
            [EnumMember(Value = "targetLanguage")]
            TargetLanguage = 2

        }

        /// <summary>
        /// Gets or Sets LocalizationType
        /// </summary>
        [DataMember(Name="localizationType", EmitDefaultValue=true)]
        public LocalizationTypeEnum? LocalizationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateColumn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateColumn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateColumn" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="type">type (required).</param>
        /// <param name="editable">editable.</param>
        /// <param name="languageCode">languageCode.</param>
        /// <param name="localizationType">localizationType.</param>
        /// <param name="numberFormat">numberFormat.</param>
        /// <param name="selectionOptions">selectionOptions.</param>
        /// <param name="reference">reference.</param>
        /// <param name="formula">formula.</param>
        /// <param name="dateTimeFormat">dateTimeFormat.</param>
        public CreateColumn(string id = default(string), string name = default(string), string description = default(string), TypeEnum type = default(TypeEnum), bool editable = default(bool), LanguageCodeEnum? languageCode = default(LanguageCodeEnum?), LocalizationTypeEnum? localizationType = default(LocalizationTypeEnum?), NumberFormat numberFormat = default(NumberFormat), List<string> selectionOptions = default(List<string>), Reference reference = default(Reference), Formula formula = default(Formula), DateTimeFormat dateTimeFormat = default(DateTimeFormat))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreateColumn and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CreateColumn and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            this.Id = id;
            this.Description = description;
            this.Editable = editable;
            this.LanguageCode = languageCode;
            this.LocalizationType = localizationType;
            this.NumberFormat = numberFormat;
            this.SelectionOptions = selectionOptions;
            this.Reference = reference;
            this.Formula = formula;
            this.DateTimeFormat = dateTimeFormat;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }


        /// <summary>
        /// Gets or Sets Editable
        /// </summary>
        [DataMember(Name="editable", EmitDefaultValue=true)]
        public bool Editable { get; set; }



        /// <summary>
        /// Gets or Sets NumberFormat
        /// </summary>
        [DataMember(Name="numberFormat", EmitDefaultValue=true)]
        public NumberFormat NumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets SelectionOptions
        /// </summary>
        [DataMember(Name="selectionOptions", EmitDefaultValue=true)]
        public List<string> SelectionOptions { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public Reference Reference { get; set; }

        /// <summary>
        /// Gets or Sets Formula
        /// </summary>
        [DataMember(Name="formula", EmitDefaultValue=true)]
        public Formula Formula { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeFormat
        /// </summary>
        [DataMember(Name="dateTimeFormat", EmitDefaultValue=true)]
        public DateTimeFormat DateTimeFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateColumn {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Editable: ").Append(Editable).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  LocalizationType: ").Append(LocalizationType).Append("\n");
            sb.Append("  NumberFormat: ").Append(NumberFormat).Append("\n");
            sb.Append("  SelectionOptions: ").Append(SelectionOptions).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  DateTimeFormat: ").Append(DateTimeFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateColumn);
        }

        /// <summary>
        /// Returns true if CreateColumn instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateColumn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateColumn input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Editable == input.Editable ||
                    (this.Editable != null &&
                    this.Editable.Equals(input.Editable))
                ) && 
                (
                    this.LanguageCode == input.LanguageCode ||
                    (this.LanguageCode != null &&
                    this.LanguageCode.Equals(input.LanguageCode))
                ) && 
                (
                    this.LocalizationType == input.LocalizationType ||
                    (this.LocalizationType != null &&
                    this.LocalizationType.Equals(input.LocalizationType))
                ) && 
                (
                    this.NumberFormat == input.NumberFormat ||
                    (this.NumberFormat != null &&
                    this.NumberFormat.Equals(input.NumberFormat))
                ) && 
                (
                    this.SelectionOptions == input.SelectionOptions ||
                    this.SelectionOptions != null &&
                    input.SelectionOptions != null &&
                    this.SelectionOptions.SequenceEqual(input.SelectionOptions)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                ) && 
                (
                    this.DateTimeFormat == input.DateTimeFormat ||
                    (this.DateTimeFormat != null &&
                    this.DateTimeFormat.Equals(input.DateTimeFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Editable != null)
                    hashCode = hashCode * 59 + this.Editable.GetHashCode();
                if (this.LanguageCode != null)
                    hashCode = hashCode * 59 + this.LanguageCode.GetHashCode();
                if (this.LocalizationType != null)
                    hashCode = hashCode * 59 + this.LocalizationType.GetHashCode();
                if (this.NumberFormat != null)
                    hashCode = hashCode * 59 + this.NumberFormat.GetHashCode();
                if (this.SelectionOptions != null)
                    hashCode = hashCode * 59 + this.SelectionOptions.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Formula != null)
                    hashCode = hashCode * 59 + this.Formula.GetHashCode();
                if (this.DateTimeFormat != null)
                    hashCode = hashCode * 59 + this.DateTimeFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // Id (string) pattern
            Regex regexId = new Regex(@"^(?!_)\\w+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }



            yield break;
        }
    }

}
