/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.27.1
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGridApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <returns>Grid</returns>
        Grid Create (string dbId, CreateGrid createGrid);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> CreateWithHttpInfo (string dbId, CreateGrid createGrid);
        /// <summary>
        /// createCategory
        /// </summary>
        /// <remarks>
        /// createCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createFileCategory"></param>
        /// <returns>FileCategory</returns>
        FileCategory CreateCategory (string gridId, CreateFileCategory createFileCategory);

        /// <summary>
        /// createCategory
        /// </summary>
        /// <remarks>
        /// createCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createFileCategory"></param>
        /// <returns>ApiResponse of FileCategory</returns>
        ApiResponse<FileCategory> CreateCategoryWithHttpInfo (string gridId, CreateFileCategory createFileCategory);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Delete a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns></returns>
        void Delete (string gridId);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Delete a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string gridId);
        /// <summary>
        /// deleteCategory
        /// </summary>
        /// <remarks>
        /// deleteCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <returns></returns>
        void DeleteCategory (string gridId, string categoryId);

        /// <summary>
        /// deleteCategory
        /// </summary>
        /// <remarks>
        /// deleteCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCategoryWithHttpInfo (string gridId, string categoryId);
        /// <summary>
        /// deleteFile
        /// </summary>
        /// <remarks>
        /// deleteFile
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="fileId">fileId</param>
        /// <returns></returns>
        void DeleteFile (string gridId, string categoryId, string fileId);

        /// <summary>
        /// deleteFile
        /// </summary>
        /// <remarks>
        /// deleteFile
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="fileId">fileId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileWithHttpInfo (string gridId, string categoryId, string fileId);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>Grid</returns>
        Grid Get (string gridId);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> GetWithHttpInfo (string gridId);
        /// <summary>
        /// getSetting
        /// </summary>
        /// <remarks>
        /// getSetting
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>GridSetting</returns>
        GridSetting GetSetting (string gridId);

        /// <summary>
        /// getSetting
        /// </summary>
        /// <remarks>
        /// getSetting
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of GridSetting</returns>
        ApiResponse<GridSetting> GetSettingWithHttpInfo (string gridId);
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <returns>List<Grid></returns>
        List<Grid> List (string dbId);

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <returns>ApiResponse of List<Grid></returns>
        ApiResponse<List<Grid>> ListWithHttpInfo (string dbId);
        /// <summary>
        /// listFiles
        /// </summary>
        /// <remarks>
        /// listFiles
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>List<SettingFile></returns>
        List<SettingFile> ListFiles (string gridId, List<string> categoryId = default(List<string>));

        /// <summary>
        /// listFiles
        /// </summary>
        /// <remarks>
        /// listFiles
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>ApiResponse of List<SettingFile></returns>
        ApiResponse<List<SettingFile>> ListFilesWithHttpInfo (string gridId, List<string> categoryId = default(List<string>));
        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// listTemplateGrids
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Grid></returns>
        List<Grid> ListTemplateGrids ();

        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// listTemplateGrids
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<Grid></returns>
        ApiResponse<List<Grid>> ListTemplateGridsWithHttpInfo ();
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// Update a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <returns>Grid</returns>
        Grid Update (string gridId, UpdateGrid updateGrid);

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// Update a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> UpdateWithHttpInfo (string gridId, UpdateGrid updateGrid);
        /// <summary>
        /// updateCategory
        /// </summary>
        /// <remarks>
        /// updateCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="updateCategory"></param>
        /// <returns>FileCategory</returns>
        FileCategory UpdateCategory (string gridId, string categoryId, UpdateCategory updateCategory);

        /// <summary>
        /// updateCategory
        /// </summary>
        /// <remarks>
        /// updateCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="updateCategory"></param>
        /// <returns>ApiResponse of FileCategory</returns>
        ApiResponse<FileCategory> UpdateCategoryWithHttpInfo (string gridId, string categoryId, UpdateCategory updateCategory);
        /// <summary>
        /// updateSetting
        /// </summary>
        /// <remarks>
        /// updateSetting
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGridSetting"></param>
        /// <returns>GridSetting</returns>
        GridSetting UpdateSetting (string gridId, UpdateGridSetting updateGridSetting);

        /// <summary>
        /// updateSetting
        /// </summary>
        /// <remarks>
        /// updateSetting
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGridSetting"></param>
        /// <returns>ApiResponse of GridSetting</returns>
        ApiResponse<GridSetting> UpdateSettingWithHttpInfo (string gridId, UpdateGridSetting updateGridSetting);
        /// <summary>
        /// uploadSettingFile
        /// </summary>
        /// <remarks>
        /// uploadSettingFile
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="uploadSettingFileRequest"></param>
        /// <returns>UploadedFile</returns>
        UploadedFile UploadSettingFile (string gridId, string categoryId, UploadSettingFileRequest uploadSettingFileRequest);

        /// <summary>
        /// uploadSettingFile
        /// </summary>
        /// <remarks>
        /// uploadSettingFile
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="uploadSettingFileRequest"></param>
        /// <returns>ApiResponse of UploadedFile</returns>
        ApiResponse<UploadedFile> UploadSettingFileWithHttpInfo (string gridId, string categoryId, UploadSettingFileRequest uploadSettingFileRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> CreateAsync (string dbId, CreateGrid createGrid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> CreateWithHttpInfoAsync (string dbId, CreateGrid createGrid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// createCategory
        /// </summary>
        /// <remarks>
        /// createCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createFileCategory"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FileCategory</returns>
        System.Threading.Tasks.Task<FileCategory> CreateCategoryAsync (string gridId, CreateFileCategory createFileCategory, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// createCategory
        /// </summary>
        /// <remarks>
        /// createCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createFileCategory"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FileCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileCategory>> CreateCategoryWithHttpInfoAsync (string gridId, CreateFileCategory createFileCategory, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Delete a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Delete a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// deleteCategory
        /// </summary>
        /// <remarks>
        /// deleteCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCategoryAsync (string gridId, string categoryId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// deleteCategory
        /// </summary>
        /// <remarks>
        /// deleteCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCategoryWithHttpInfoAsync (string gridId, string categoryId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// deleteFile
        /// </summary>
        /// <remarks>
        /// deleteFile
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="fileId">fileId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileAsync (string gridId, string categoryId, string fileId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// deleteFile
        /// </summary>
        /// <remarks>
        /// deleteFile
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="fileId">fileId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileWithHttpInfoAsync (string gridId, string categoryId, string fileId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> GetAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> GetWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// getSetting
        /// </summary>
        /// <remarks>
        /// getSetting
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GridSetting</returns>
        System.Threading.Tasks.Task<GridSetting> GetSettingAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getSetting
        /// </summary>
        /// <remarks>
        /// getSetting
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GridSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<GridSetting>> GetSettingWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Grid></returns>
        System.Threading.Tasks.Task<List<Grid>> ListAsync (string dbId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Grid>>> ListWithHttpInfoAsync (string dbId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// listFiles
        /// </summary>
        /// <remarks>
        /// listFiles
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<SettingFile></returns>
        System.Threading.Tasks.Task<List<SettingFile>> ListFilesAsync (string gridId, List<string> categoryId = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// listFiles
        /// </summary>
        /// <remarks>
        /// listFiles
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SettingFile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SettingFile>>> ListFilesWithHttpInfoAsync (string gridId, List<string> categoryId = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// listTemplateGrids
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Grid></returns>
        System.Threading.Tasks.Task<List<Grid>> ListTemplateGridsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// listTemplateGrids
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Grid>>> ListTemplateGridsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// Update a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> UpdateAsync (string gridId, UpdateGrid updateGrid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// Update a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> UpdateWithHttpInfoAsync (string gridId, UpdateGrid updateGrid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// updateCategory
        /// </summary>
        /// <remarks>
        /// updateCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="updateCategory"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FileCategory</returns>
        System.Threading.Tasks.Task<FileCategory> UpdateCategoryAsync (string gridId, string categoryId, UpdateCategory updateCategory, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// updateCategory
        /// </summary>
        /// <remarks>
        /// updateCategory
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="updateCategory"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FileCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileCategory>> UpdateCategoryWithHttpInfoAsync (string gridId, string categoryId, UpdateCategory updateCategory, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// updateSetting
        /// </summary>
        /// <remarks>
        /// updateSetting
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGridSetting"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GridSetting</returns>
        System.Threading.Tasks.Task<GridSetting> UpdateSettingAsync (string gridId, UpdateGridSetting updateGridSetting, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// updateSetting
        /// </summary>
        /// <remarks>
        /// updateSetting
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGridSetting"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GridSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<GridSetting>> UpdateSettingWithHttpInfoAsync (string gridId, UpdateGridSetting updateGridSetting, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// uploadSettingFile
        /// </summary>
        /// <remarks>
        /// uploadSettingFile
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="uploadSettingFileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadedFile</returns>
        System.Threading.Tasks.Task<UploadedFile> UploadSettingFileAsync (string gridId, string categoryId, UploadSettingFileRequest uploadSettingFileRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// uploadSettingFile
        /// </summary>
        /// <remarks>
        /// uploadSettingFile
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="uploadSettingFileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadedFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadedFile>> UploadSettingFileWithHttpInfoAsync (string gridId, string categoryId, UploadSettingFileRequest uploadSettingFileRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GridApi : IGridApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GridApi(String basePath)
        {
            this.Configuration = new Com.Gridly.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class
        /// </summary>
        /// <returns></returns>
        public GridApi()
        {
            this.Configuration = Com.Gridly.Client.Configuration.Default;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GridApi(Com.Gridly.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.Gridly.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// create Create a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <returns>Grid</returns>
        public Grid Create (string dbId, CreateGrid createGrid)
        {
             ApiResponse<Grid> localVarResponse = CreateWithHttpInfo(dbId, createGrid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create Create a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <returns>ApiResponse of Grid</returns>
        public ApiResponse<Grid> CreateWithHttpInfo (string dbId, CreateGrid createGrid)
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
                throw new ApiException(400, "Missing required parameter 'dbId' when calling GridApi->Create");
            // verify the required parameter 'createGrid' is set
            if (createGrid == null)
                throw new ApiException(400, "Missing required parameter 'createGrid' when calling GridApi->Create");

            var localVarPath = "/v1/grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbId", dbId)); // query parameter
            if (createGrid != null && createGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGrid; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

        /// <summary>
        /// create Create a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> CreateAsync (string dbId, CreateGrid createGrid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Grid> localVarResponse = await CreateWithHttpInfoAsync(dbId, createGrid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create Create a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Grid>> CreateWithHttpInfoAsync (string dbId, CreateGrid createGrid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
                throw new ApiException(400, "Missing required parameter 'dbId' when calling GridApi->Create");
            // verify the required parameter 'createGrid' is set
            if (createGrid == null)
                throw new ApiException(400, "Missing required parameter 'createGrid' when calling GridApi->Create");

            var localVarPath = "/v1/grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbId", dbId)); // query parameter
            if (createGrid != null && createGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGrid; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

        /// <summary>
        /// createCategory createCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createFileCategory"></param>
        /// <returns>FileCategory</returns>
        public FileCategory CreateCategory (string gridId, CreateFileCategory createFileCategory)
        {
             ApiResponse<FileCategory> localVarResponse = CreateCategoryWithHttpInfo(gridId, createFileCategory);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createCategory createCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createFileCategory"></param>
        /// <returns>ApiResponse of FileCategory</returns>
        public ApiResponse<FileCategory> CreateCategoryWithHttpInfo (string gridId, CreateFileCategory createFileCategory)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->CreateCategory");
            // verify the required parameter 'createFileCategory' is set
            if (createFileCategory == null)
                throw new ApiException(400, "Missing required parameter 'createFileCategory' when calling GridApi->CreateCategory");

            var localVarPath = "/v1/grids/{gridId}/settings/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (createFileCategory != null && createFileCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createFileCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createFileCategory; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileCategory)));
        }

        /// <summary>
        /// createCategory createCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createFileCategory"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FileCategory</returns>
        public async System.Threading.Tasks.Task<FileCategory> CreateCategoryAsync (string gridId, CreateFileCategory createFileCategory, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FileCategory> localVarResponse = await CreateCategoryWithHttpInfoAsync(gridId, createFileCategory, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createCategory createCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createFileCategory"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FileCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileCategory>> CreateCategoryWithHttpInfoAsync (string gridId, CreateFileCategory createFileCategory, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->CreateCategory");
            // verify the required parameter 'createFileCategory' is set
            if (createFileCategory == null)
                throw new ApiException(400, "Missing required parameter 'createFileCategory' when calling GridApi->CreateCategory");

            var localVarPath = "/v1/grids/{gridId}/settings/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (createFileCategory != null && createFileCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createFileCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createFileCategory; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileCategory)));
        }

        /// <summary>
        /// delete Delete a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns></returns>
        public void Delete (string gridId)
        {
             DeleteWithHttpInfo(gridId);
        }

        /// <summary>
        /// delete Delete a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string gridId)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Delete");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// delete Delete a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteWithHttpInfoAsync(gridId, cancellationToken);

        }

        /// <summary>
        /// delete Delete a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Delete");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deleteCategory deleteCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <returns></returns>
        public void DeleteCategory (string gridId, string categoryId)
        {
             DeleteCategoryWithHttpInfo(gridId, categoryId);
        }

        /// <summary>
        /// deleteCategory deleteCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCategoryWithHttpInfo (string gridId, string categoryId)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->DeleteCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling GridApi->DeleteCategory");

            var localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deleteCategory deleteCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCategoryAsync (string gridId, string categoryId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteCategoryWithHttpInfoAsync(gridId, categoryId, cancellationToken);

        }

        /// <summary>
        /// deleteCategory deleteCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCategoryWithHttpInfoAsync (string gridId, string categoryId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->DeleteCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling GridApi->DeleteCategory");

            var localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deleteFile deleteFile
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="fileId">fileId</param>
        /// <returns></returns>
        public void DeleteFile (string gridId, string categoryId, string fileId)
        {
             DeleteFileWithHttpInfo(gridId, categoryId, fileId);
        }

        /// <summary>
        /// deleteFile deleteFile
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="fileId">fileId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFileWithHttpInfo (string gridId, string categoryId, string fileId)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->DeleteFile");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling GridApi->DeleteFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling GridApi->DeleteFile");

            var localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deleteFile deleteFile
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="fileId">fileId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileAsync (string gridId, string categoryId, string fileId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteFileWithHttpInfoAsync(gridId, categoryId, fileId, cancellationToken);

        }

        /// <summary>
        /// deleteFile deleteFile
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="fileId">fileId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileWithHttpInfoAsync (string gridId, string categoryId, string fileId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->DeleteFile");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling GridApi->DeleteFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling GridApi->DeleteFile");

            var localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>Grid</returns>
        public Grid Get (string gridId)
        {
             ApiResponse<Grid> localVarResponse = GetWithHttpInfo(gridId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of Grid</returns>
        public ApiResponse<Grid> GetWithHttpInfo (string gridId)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Get");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

        /// <summary>
        /// get Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> GetAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Grid> localVarResponse = await GetWithHttpInfoAsync(gridId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Grid>> GetWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Get");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

        /// <summary>
        /// getSetting getSetting
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>GridSetting</returns>
        public GridSetting GetSetting (string gridId)
        {
             ApiResponse<GridSetting> localVarResponse = GetSettingWithHttpInfo(gridId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSetting getSetting
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of GridSetting</returns>
        public ApiResponse<GridSetting> GetSettingWithHttpInfo (string gridId)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->GetSetting");

            var localVarPath = "/v1/grids/{gridId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GridSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSetting)));
        }

        /// <summary>
        /// getSetting getSetting
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GridSetting</returns>
        public async System.Threading.Tasks.Task<GridSetting> GetSettingAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GridSetting> localVarResponse = await GetSettingWithHttpInfoAsync(gridId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSetting getSetting
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GridSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GridSetting>> GetSettingWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->GetSetting");

            var localVarPath = "/v1/grids/{gridId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GridSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSetting)));
        }

        /// <summary>
        /// list Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <returns>List<Grid></returns>
        public List<Grid> List (string dbId)
        {
             ApiResponse<List<Grid>> localVarResponse = ListWithHttpInfo(dbId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <returns>ApiResponse of List<Grid></returns>
        public ApiResponse<List<Grid>> ListWithHttpInfo (string dbId)
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
                throw new ApiException(400, "Missing required parameter 'dbId' when calling GridApi->List");

            var localVarPath = "/v1/grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbId", dbId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Grid>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Grid>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Grid>)));
        }

        /// <summary>
        /// list Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Grid></returns>
        public async System.Threading.Tasks.Task<List<Grid>> ListAsync (string dbId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Grid>> localVarResponse = await ListWithHttpInfoAsync(dbId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Grid>>> ListWithHttpInfoAsync (string dbId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
                throw new ApiException(400, "Missing required parameter 'dbId' when calling GridApi->List");

            var localVarPath = "/v1/grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbId", dbId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Grid>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Grid>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Grid>)));
        }

        /// <summary>
        /// listFiles listFiles
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>List<SettingFile></returns>
        public List<SettingFile> ListFiles (string gridId, List<string> categoryId = default(List<string>))
        {
             ApiResponse<List<SettingFile>> localVarResponse = ListFilesWithHttpInfo(gridId, categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// listFiles listFiles
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <returns>ApiResponse of List<SettingFile></returns>
        public ApiResponse<List<SettingFile>> ListFilesWithHttpInfo (string gridId, List<string> categoryId = default(List<string>))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->ListFiles");

            var localVarPath = "/v1/grids/{gridId}/settings/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "categoryId", categoryId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SettingFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SettingFile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SettingFile>)));
        }

        /// <summary>
        /// listFiles listFiles
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<SettingFile></returns>
        public async System.Threading.Tasks.Task<List<SettingFile>> ListFilesAsync (string gridId, List<string> categoryId = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<SettingFile>> localVarResponse = await ListFilesWithHttpInfoAsync(gridId, categoryId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listFiles listFiles
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SettingFile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SettingFile>>> ListFilesWithHttpInfoAsync (string gridId, List<string> categoryId = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->ListFiles");

            var localVarPath = "/v1/grids/{gridId}/settings/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "categoryId", categoryId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SettingFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SettingFile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SettingFile>)));
        }

        /// <summary>
        /// listTemplateGrids listTemplateGrids
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Grid></returns>
        public List<Grid> ListTemplateGrids ()
        {
             ApiResponse<List<Grid>> localVarResponse = ListTemplateGridsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// listTemplateGrids listTemplateGrids
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<Grid></returns>
        public ApiResponse<List<Grid>> ListTemplateGridsWithHttpInfo ()
        {

            var localVarPath = "/v1/template-grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTemplateGrids", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Grid>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Grid>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Grid>)));
        }

        /// <summary>
        /// listTemplateGrids listTemplateGrids
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Grid></returns>
        public async System.Threading.Tasks.Task<List<Grid>> ListTemplateGridsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Grid>> localVarResponse = await ListTemplateGridsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listTemplateGrids listTemplateGrids
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Grid>>> ListTemplateGridsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/template-grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTemplateGrids", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Grid>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Grid>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Grid>)));
        }

        /// <summary>
        /// update Update a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <returns>Grid</returns>
        public Grid Update (string gridId, UpdateGrid updateGrid)
        {
             ApiResponse<Grid> localVarResponse = UpdateWithHttpInfo(gridId, updateGrid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update Update a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <returns>ApiResponse of Grid</returns>
        public ApiResponse<Grid> UpdateWithHttpInfo (string gridId, UpdateGrid updateGrid)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Update");
            // verify the required parameter 'updateGrid' is set
            if (updateGrid == null)
                throw new ApiException(400, "Missing required parameter 'updateGrid' when calling GridApi->Update");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (updateGrid != null && updateGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGrid; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

        /// <summary>
        /// update Update a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> UpdateAsync (string gridId, UpdateGrid updateGrid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Grid> localVarResponse = await UpdateWithHttpInfoAsync(gridId, updateGrid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update Update a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Grid>> UpdateWithHttpInfoAsync (string gridId, UpdateGrid updateGrid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Update");
            // verify the required parameter 'updateGrid' is set
            if (updateGrid == null)
                throw new ApiException(400, "Missing required parameter 'updateGrid' when calling GridApi->Update");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (updateGrid != null && updateGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGrid; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

        /// <summary>
        /// updateCategory updateCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="updateCategory"></param>
        /// <returns>FileCategory</returns>
        public FileCategory UpdateCategory (string gridId, string categoryId, UpdateCategory updateCategory)
        {
             ApiResponse<FileCategory> localVarResponse = UpdateCategoryWithHttpInfo(gridId, categoryId, updateCategory);
             return localVarResponse.Data;
        }

        /// <summary>
        /// updateCategory updateCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="updateCategory"></param>
        /// <returns>ApiResponse of FileCategory</returns>
        public ApiResponse<FileCategory> UpdateCategoryWithHttpInfo (string gridId, string categoryId, UpdateCategory updateCategory)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->UpdateCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling GridApi->UpdateCategory");
            // verify the required parameter 'updateCategory' is set
            if (updateCategory == null)
                throw new ApiException(400, "Missing required parameter 'updateCategory' when calling GridApi->UpdateCategory");

            var localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (updateCategory != null && updateCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCategory; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileCategory)));
        }

        /// <summary>
        /// updateCategory updateCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="updateCategory"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FileCategory</returns>
        public async System.Threading.Tasks.Task<FileCategory> UpdateCategoryAsync (string gridId, string categoryId, UpdateCategory updateCategory, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FileCategory> localVarResponse = await UpdateCategoryWithHttpInfoAsync(gridId, categoryId, updateCategory, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updateCategory updateCategory
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="updateCategory"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FileCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileCategory>> UpdateCategoryWithHttpInfoAsync (string gridId, string categoryId, UpdateCategory updateCategory, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->UpdateCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling GridApi->UpdateCategory");
            // verify the required parameter 'updateCategory' is set
            if (updateCategory == null)
                throw new ApiException(400, "Missing required parameter 'updateCategory' when calling GridApi->UpdateCategory");

            var localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (updateCategory != null && updateCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCategory; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileCategory)));
        }

        /// <summary>
        /// updateSetting updateSetting
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGridSetting"></param>
        /// <returns>GridSetting</returns>
        public GridSetting UpdateSetting (string gridId, UpdateGridSetting updateGridSetting)
        {
             ApiResponse<GridSetting> localVarResponse = UpdateSettingWithHttpInfo(gridId, updateGridSetting);
             return localVarResponse.Data;
        }

        /// <summary>
        /// updateSetting updateSetting
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGridSetting"></param>
        /// <returns>ApiResponse of GridSetting</returns>
        public ApiResponse<GridSetting> UpdateSettingWithHttpInfo (string gridId, UpdateGridSetting updateGridSetting)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->UpdateSetting");
            // verify the required parameter 'updateGridSetting' is set
            if (updateGridSetting == null)
                throw new ApiException(400, "Missing required parameter 'updateGridSetting' when calling GridApi->UpdateSetting");

            var localVarPath = "/v1/grids/{gridId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (updateGridSetting != null && updateGridSetting.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGridSetting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGridSetting; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GridSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSetting)));
        }

        /// <summary>
        /// updateSetting updateSetting
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGridSetting"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GridSetting</returns>
        public async System.Threading.Tasks.Task<GridSetting> UpdateSettingAsync (string gridId, UpdateGridSetting updateGridSetting, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GridSetting> localVarResponse = await UpdateSettingWithHttpInfoAsync(gridId, updateGridSetting, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updateSetting updateSetting
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGridSetting"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GridSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GridSetting>> UpdateSettingWithHttpInfoAsync (string gridId, UpdateGridSetting updateGridSetting, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->UpdateSetting");
            // verify the required parameter 'updateGridSetting' is set
            if (updateGridSetting == null)
                throw new ApiException(400, "Missing required parameter 'updateGridSetting' when calling GridApi->UpdateSetting");

            var localVarPath = "/v1/grids/{gridId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (updateGridSetting != null && updateGridSetting.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGridSetting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGridSetting; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GridSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSetting)));
        }

        /// <summary>
        /// uploadSettingFile uploadSettingFile
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="uploadSettingFileRequest"></param>
        /// <returns>UploadedFile</returns>
        public UploadedFile UploadSettingFile (string gridId, string categoryId, UploadSettingFileRequest uploadSettingFileRequest)
        {
             ApiResponse<UploadedFile> localVarResponse = UploadSettingFileWithHttpInfo(gridId, categoryId, uploadSettingFileRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// uploadSettingFile uploadSettingFile
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="uploadSettingFileRequest"></param>
        /// <returns>ApiResponse of UploadedFile</returns>
        public ApiResponse<UploadedFile> UploadSettingFileWithHttpInfo (string gridId, string categoryId, UploadSettingFileRequest uploadSettingFileRequest)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->UploadSettingFile");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling GridApi->UploadSettingFile");
            // verify the required parameter 'uploadSettingFileRequest' is set
            if (uploadSettingFileRequest == null)
                throw new ApiException(400, "Missing required parameter 'uploadSettingFileRequest' when calling GridApi->UploadSettingFile");

            var localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (uploadSettingFileRequest != null && uploadSettingFileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSettingFileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSettingFileRequest; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSettingFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadedFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadedFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadedFile)));
        }

        /// <summary>
        /// uploadSettingFile uploadSettingFile
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="uploadSettingFileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadedFile</returns>
        public async System.Threading.Tasks.Task<UploadedFile> UploadSettingFileAsync (string gridId, string categoryId, UploadSettingFileRequest uploadSettingFileRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UploadedFile> localVarResponse = await UploadSettingFileWithHttpInfoAsync(gridId, categoryId, uploadSettingFileRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// uploadSettingFile uploadSettingFile
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="uploadSettingFileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadedFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadedFile>> UploadSettingFileWithHttpInfoAsync (string gridId, string categoryId, UploadSettingFileRequest uploadSettingFileRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->UploadSettingFile");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling GridApi->UploadSettingFile");
            // verify the required parameter 'uploadSettingFileRequest' is set
            if (uploadSettingFileRequest == null)
                throw new ApiException(400, "Missing required parameter 'uploadSettingFileRequest' when calling GridApi->UploadSettingFile");

            var localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (uploadSettingFileRequest != null && uploadSettingFileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSettingFileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSettingFileRequest; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSettingFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadedFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadedFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadedFile)));
        }

    }
}
