/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.21.5
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransmemApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Erases all the translation data of the provided tmId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns></returns>
        void Cleanup (string tmId);

        /// <summary>
        /// Erases all the translation data of the provided tmId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CleanupWithHttpInfo (string tmId);
        /// <summary>
        /// Create a new translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransMem"> (optional)</param>
        /// <returns>TransMem</returns>
        TransMem Create (CreateTransMem createTransMem = default(CreateTransMem));

        /// <summary>
        /// Create a new translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransMem"> (optional)</param>
        /// <returns>ApiResponse of TransMem</returns>
        ApiResponse<TransMem> CreateWithHttpInfo (CreateTransMem createTransMem = default(CreateTransMem));
        /// <summary>
        /// Create a new translation memory by uploading tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>TransMem</returns>
        TransMem CreateWithFile (System.IO.Stream file);

        /// <summary>
        /// Create a new translation memory by uploading tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>ApiResponse of TransMem</returns>
        ApiResponse<TransMem> CreateWithFileWithHttpInfo (System.IO.Stream file);
        /// <summary>
        /// Delete a translation memory by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns>TransMem</returns>
        TransMem Delete (string tmId);

        /// <summary>
        /// Delete a translation memory by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns>ApiResponse of TransMem</returns>
        ApiResponse<TransMem> DeleteWithHttpInfo (string tmId);
        /// <summary>
        /// Export translation memory tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="sourceLang"> (optional)</param>
        /// <param name="targetLangs"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream Export (string tmId, ExportFormat? format = default(ExportFormat?), string sourceLang = default(string), List<string> targetLangs = default(List<string>));

        /// <summary>
        /// Export translation memory tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="sourceLang"> (optional)</param>
        /// <param name="targetLangs"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ExportWithHttpInfo (string tmId, ExportFormat? format = default(ExportFormat?), string sourceLang = default(string), List<string> targetLangs = default(List<string>));
        /// <summary>
        /// Get translation memory info by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns>TransMem</returns>
        TransMem Get (string tmId);

        /// <summary>
        /// Get translation memory info by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns>ApiResponse of TransMem</returns>
        ApiResponse<TransMem> GetWithHttpInfo (string tmId);
        /// <summary>
        /// Import a translation memory from tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        void ImportTmx (string tmId, System.IO.Stream file);

        /// <summary>
        /// Import a translation memory from tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="file"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportTmxWithHttpInfo (string tmId, System.IO.Stream file);
        /// <summary>
        /// List all available translation memories or create default one if there is no translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"> (optional)</param>
        /// <returns>List<TransMem></returns>
        List<TransMem> ListTM (long? projectId = default(long?));

        /// <summary>
        /// List all available translation memories or create default one if there is no translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"> (optional)</param>
        /// <returns>ApiResponse of List<TransMem></returns>
        ApiResponse<List<TransMem>> ListTMWithHttpInfo (long? projectId = default(long?));
        /// <summary>
        /// Update a translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="updateTransMem"> (optional)</param>
        /// <returns>TransMem</returns>
        TransMem Update (string tmId, UpdateTransMem updateTransMem = default(UpdateTransMem));

        /// <summary>
        /// Update a translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="updateTransMem"> (optional)</param>
        /// <returns>ApiResponse of TransMem</returns>
        ApiResponse<TransMem> UpdateWithHttpInfo (string tmId, UpdateTransMem updateTransMem = default(UpdateTransMem));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Erases all the translation data of the provided tmId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CleanupAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Erases all the translation data of the provided tmId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CleanupWithHttpInfoAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransMem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransMem</returns>
        System.Threading.Tasks.Task<TransMem> CreateAsync (CreateTransMem createTransMem = default(CreateTransMem), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransMem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransMem)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransMem>> CreateWithHttpInfoAsync (CreateTransMem createTransMem = default(CreateTransMem), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new translation memory by uploading tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransMem</returns>
        System.Threading.Tasks.Task<TransMem> CreateWithFileAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new translation memory by uploading tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransMem)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransMem>> CreateWithFileWithHttpInfoAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a translation memory by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransMem</returns>
        System.Threading.Tasks.Task<TransMem> DeleteAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a translation memory by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransMem)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransMem>> DeleteWithHttpInfoAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Export translation memory tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="sourceLang"> (optional)</param>
        /// <param name="targetLangs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ExportAsync (string tmId, ExportFormat? format = default(ExportFormat?), string sourceLang = default(string), List<string> targetLangs = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Export translation memory tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="sourceLang"> (optional)</param>
        /// <param name="targetLangs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ExportWithHttpInfoAsync (string tmId, ExportFormat? format = default(ExportFormat?), string sourceLang = default(string), List<string> targetLangs = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get translation memory info by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransMem</returns>
        System.Threading.Tasks.Task<TransMem> GetAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get translation memory info by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransMem)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransMem>> GetWithHttpInfoAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Import a translation memory from tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportTmxAsync (string tmId, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Import a translation memory from tmx file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportTmxWithHttpInfoAsync (string tmId, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all available translation memories or create default one if there is no translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransMem></returns>
        System.Threading.Tasks.Task<List<TransMem>> ListTMAsync (long? projectId = default(long?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all available translation memories or create default one if there is no translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransMem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TransMem>>> ListTMWithHttpInfoAsync (long? projectId = default(long?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="updateTransMem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransMem</returns>
        System.Threading.Tasks.Task<TransMem> UpdateAsync (string tmId, UpdateTransMem updateTransMem = default(UpdateTransMem), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a translation memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="updateTransMem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransMem)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransMem>> UpdateWithHttpInfoAsync (string tmId, UpdateTransMem updateTransMem = default(UpdateTransMem), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransmemApi : ITransmemApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransmemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransmemApi(String basePath)
        {
            this.Configuration = new Com.Gridly.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransmemApi"/> class
        /// </summary>
        /// <returns></returns>
        public TransmemApi()
        {
            this.Configuration = Com.Gridly.Client.Configuration.Default;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransmemApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransmemApi(Com.Gridly.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.Gridly.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Erases all the translation data of the provided tmId 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns></returns>
        public void Cleanup (string tmId)
        {
             CleanupWithHttpInfo(tmId);
        }

        /// <summary>
        /// Erases all the translation data of the provided tmId 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CleanupWithHttpInfo (string tmId)
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->Cleanup");

            var localVarPath = "/v1/transmems/{tmId}/cleanup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Cleanup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Erases all the translation data of the provided tmId 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CleanupAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await CleanupWithHttpInfoAsync(tmId, cancellationToken);

        }

        /// <summary>
        /// Erases all the translation data of the provided tmId 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CleanupWithHttpInfoAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->Cleanup");

            var localVarPath = "/v1/transmems/{tmId}/cleanup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Cleanup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransMem"> (optional)</param>
        /// <returns>TransMem</returns>
        public TransMem Create (CreateTransMem createTransMem = default(CreateTransMem))
        {
             ApiResponse<TransMem> localVarResponse = CreateWithHttpInfo(createTransMem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransMem"> (optional)</param>
        /// <returns>ApiResponse of TransMem</returns>
        public ApiResponse<TransMem> CreateWithHttpInfo (CreateTransMem createTransMem = default(CreateTransMem))
        {

            var localVarPath = "/v1/transmems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createTransMem != null && createTransMem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTransMem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTransMem; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransMem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransMem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransMem)));
        }

        /// <summary>
        /// Create a new translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransMem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransMem</returns>
        public async System.Threading.Tasks.Task<TransMem> CreateAsync (CreateTransMem createTransMem = default(CreateTransMem), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransMem> localVarResponse = await CreateWithHttpInfoAsync(createTransMem, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransMem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransMem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransMem>> CreateWithHttpInfoAsync (CreateTransMem createTransMem = default(CreateTransMem), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/transmems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createTransMem != null && createTransMem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTransMem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTransMem; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransMem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransMem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransMem)));
        }

        /// <summary>
        /// Create a new translation memory by uploading tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>TransMem</returns>
        public TransMem CreateWithFile (System.IO.Stream file)
        {
             ApiResponse<TransMem> localVarResponse = CreateWithFileWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new translation memory by uploading tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>ApiResponse of TransMem</returns>
        public ApiResponse<TransMem> CreateWithFileWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TransmemApi->CreateWithFile");

            var localVarPath = "/v1/transmems/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWithFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransMem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransMem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransMem)));
        }

        /// <summary>
        /// Create a new translation memory by uploading tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransMem</returns>
        public async System.Threading.Tasks.Task<TransMem> CreateWithFileAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransMem> localVarResponse = await CreateWithFileWithHttpInfoAsync(file, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new translation memory by uploading tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransMem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransMem>> CreateWithFileWithHttpInfoAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TransmemApi->CreateWithFile");

            var localVarPath = "/v1/transmems/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWithFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransMem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransMem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransMem)));
        }

        /// <summary>
        /// Delete a translation memory by id 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns>TransMem</returns>
        public TransMem Delete (string tmId)
        {
             ApiResponse<TransMem> localVarResponse = DeleteWithHttpInfo(tmId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a translation memory by id 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns>ApiResponse of TransMem</returns>
        public ApiResponse<TransMem> DeleteWithHttpInfo (string tmId)
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->Delete");

            var localVarPath = "/v1/transmems/{tmId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransMem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransMem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransMem)));
        }

        /// <summary>
        /// Delete a translation memory by id 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransMem</returns>
        public async System.Threading.Tasks.Task<TransMem> DeleteAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransMem> localVarResponse = await DeleteWithHttpInfoAsync(tmId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a translation memory by id 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransMem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransMem>> DeleteWithHttpInfoAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->Delete");

            var localVarPath = "/v1/transmems/{tmId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransMem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransMem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransMem)));
        }

        /// <summary>
        /// Export translation memory tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="sourceLang"> (optional)</param>
        /// <param name="targetLangs"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream Export (string tmId, ExportFormat? format = default(ExportFormat?), string sourceLang = default(string), List<string> targetLangs = default(List<string>))
        {
             ApiResponse<System.IO.Stream> localVarResponse = ExportWithHttpInfo(tmId, format, sourceLang, targetLangs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export translation memory tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="sourceLang"> (optional)</param>
        /// <param name="targetLangs"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ExportWithHttpInfo (string tmId, ExportFormat? format = default(ExportFormat?), string sourceLang = default(string), List<string> targetLangs = default(List<string>))
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->Export");

            var localVarPath = "/v1/transmems/{tmId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (sourceLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceLang", sourceLang)); // query parameter
            if (targetLangs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "targetLangs", targetLangs)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Export", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Export translation memory tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="sourceLang"> (optional)</param>
        /// <param name="targetLangs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ExportAsync (string tmId, ExportFormat? format = default(ExportFormat?), string sourceLang = default(string), List<string> targetLangs = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ExportWithHttpInfoAsync(tmId, format, sourceLang, targetLangs, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export translation memory tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="sourceLang"> (optional)</param>
        /// <param name="targetLangs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ExportWithHttpInfoAsync (string tmId, ExportFormat? format = default(ExportFormat?), string sourceLang = default(string), List<string> targetLangs = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->Export");

            var localVarPath = "/v1/transmems/{tmId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (sourceLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceLang", sourceLang)); // query parameter
            if (targetLangs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "targetLangs", targetLangs)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Export", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get translation memory info by id 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns>TransMem</returns>
        public TransMem Get (string tmId)
        {
             ApiResponse<TransMem> localVarResponse = GetWithHttpInfo(tmId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get translation memory info by id 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <returns>ApiResponse of TransMem</returns>
        public ApiResponse<TransMem> GetWithHttpInfo (string tmId)
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->Get");

            var localVarPath = "/v1/transmems/{tmId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransMem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransMem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransMem)));
        }

        /// <summary>
        /// Get translation memory info by id 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransMem</returns>
        public async System.Threading.Tasks.Task<TransMem> GetAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransMem> localVarResponse = await GetWithHttpInfoAsync(tmId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get translation memory info by id 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransMem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransMem>> GetWithHttpInfoAsync (string tmId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->Get");

            var localVarPath = "/v1/transmems/{tmId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransMem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransMem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransMem)));
        }

        /// <summary>
        /// Import a translation memory from tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        public void ImportTmx (string tmId, System.IO.Stream file)
        {
             ImportTmxWithHttpInfo(tmId, file);
        }

        /// <summary>
        /// Import a translation memory from tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="file"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportTmxWithHttpInfo (string tmId, System.IO.Stream file)
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->ImportTmx");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TransmemApi->ImportTmx");

            var localVarPath = "/v1/transmems/{tmId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportTmx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Import a translation memory from tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportTmxAsync (string tmId, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ImportTmxWithHttpInfoAsync(tmId, file, cancellationToken);

        }

        /// <summary>
        /// Import a translation memory from tmx file 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportTmxWithHttpInfoAsync (string tmId, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->ImportTmx");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TransmemApi->ImportTmx");

            var localVarPath = "/v1/transmems/{tmId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportTmx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List all available translation memories or create default one if there is no translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"> (optional)</param>
        /// <returns>List<TransMem></returns>
        public List<TransMem> ListTM (long? projectId = default(long?))
        {
             ApiResponse<List<TransMem>> localVarResponse = ListTMWithHttpInfo(projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all available translation memories or create default one if there is no translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"> (optional)</param>
        /// <returns>ApiResponse of List<TransMem></returns>
        public ApiResponse<List<TransMem>> ListTMWithHttpInfo (long? projectId = default(long?))
        {

            var localVarPath = "/v1/transmems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "projectId", projectId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTM", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransMem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransMem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransMem>)));
        }

        /// <summary>
        /// List all available translation memories or create default one if there is no translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransMem></returns>
        public async System.Threading.Tasks.Task<List<TransMem>> ListTMAsync (long? projectId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TransMem>> localVarResponse = await ListTMWithHttpInfoAsync(projectId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all available translation memories or create default one if there is no translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransMem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TransMem>>> ListTMWithHttpInfoAsync (long? projectId = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/transmems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "projectId", projectId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTM", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransMem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransMem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransMem>)));
        }

        /// <summary>
        /// Update a translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="updateTransMem"> (optional)</param>
        /// <returns>TransMem</returns>
        public TransMem Update (string tmId, UpdateTransMem updateTransMem = default(UpdateTransMem))
        {
             ApiResponse<TransMem> localVarResponse = UpdateWithHttpInfo(tmId, updateTransMem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="updateTransMem"> (optional)</param>
        /// <returns>ApiResponse of TransMem</returns>
        public ApiResponse<TransMem> UpdateWithHttpInfo (string tmId, UpdateTransMem updateTransMem = default(UpdateTransMem))
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->Update");

            var localVarPath = "/v1/transmems/{tmId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter
            if (updateTransMem != null && updateTransMem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTransMem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTransMem; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransMem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransMem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransMem)));
        }

        /// <summary>
        /// Update a translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="updateTransMem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransMem</returns>
        public async System.Threading.Tasks.Task<TransMem> UpdateAsync (string tmId, UpdateTransMem updateTransMem = default(UpdateTransMem), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransMem> localVarResponse = await UpdateWithHttpInfoAsync(tmId, updateTransMem, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a translation memory 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmId"></param>
        /// <param name="updateTransMem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransMem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransMem>> UpdateWithHttpInfoAsync (string tmId, UpdateTransMem updateTransMem = default(UpdateTransMem), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tmId' is set
            if (tmId == null)
                throw new ApiException(400, "Missing required parameter 'tmId' when calling TransmemApi->Update");

            var localVarPath = "/v1/transmems/{tmId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmId != null) localVarPathParams.Add("tmId", this.Configuration.ApiClient.ParameterToString(tmId)); // path parameter
            if (updateTransMem != null && updateTransMem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTransMem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTransMem; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransMem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransMem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransMem)));
        }

    }
}
