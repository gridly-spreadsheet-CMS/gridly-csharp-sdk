/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICdnApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 128)</param>
        /// <param name="ids">ids (optional)</param>
        /// <param name="published">published (optional)</param>
        /// <returns>List<CDN></returns>
        List<CDN> List (string gridId, int? offset = default(int?), int? limit = default(int?), List<string> ids = default(List<string>), bool? published = default(bool?));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 128)</param>
        /// <param name="ids">ids (optional)</param>
        /// <param name="published">published (optional)</param>
        /// <returns>ApiResponse of List<CDN></returns>
        ApiResponse<List<CDN>> ListWithHttpInfo (string gridId, int? offset = default(int?), int? limit = default(int?), List<string> ids = default(List<string>), bool? published = default(bool?));
        /// <summary>
        /// publish
        /// </summary>
        /// <remarks>
        /// publish
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <returns>CDN</returns>
        CDN Publish (string cdnId);

        /// <summary>
        /// publish
        /// </summary>
        /// <remarks>
        /// publish
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <returns>ApiResponse of CDN</returns>
        ApiResponse<CDN> PublishWithHttpInfo (string cdnId);
        /// <summary>
        /// unPublish
        /// </summary>
        /// <remarks>
        /// unPublish
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <returns>CDN</returns>
        CDN UnPublish (string cdnId);

        /// <summary>
        /// unPublish
        /// </summary>
        /// <remarks>
        /// unPublish
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <returns>ApiResponse of CDN</returns>
        ApiResponse<CDN> UnPublishWithHttpInfo (string cdnId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 128)</param>
        /// <param name="ids">ids (optional)</param>
        /// <param name="published">published (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CDN></returns>
        System.Threading.Tasks.Task<List<CDN>> ListAsync (string gridId, int? offset = default(int?), int? limit = default(int?), List<string> ids = default(List<string>), bool? published = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 128)</param>
        /// <param name="ids">ids (optional)</param>
        /// <param name="published">published (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CDN&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CDN>>> ListWithHttpInfoAsync (string gridId, int? offset = default(int?), int? limit = default(int?), List<string> ids = default(List<string>), bool? published = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// publish
        /// </summary>
        /// <remarks>
        /// publish
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CDN</returns>
        System.Threading.Tasks.Task<CDN> PublishAsync (string cdnId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// publish
        /// </summary>
        /// <remarks>
        /// publish
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CDN)</returns>
        System.Threading.Tasks.Task<ApiResponse<CDN>> PublishWithHttpInfoAsync (string cdnId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// unPublish
        /// </summary>
        /// <remarks>
        /// unPublish
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CDN</returns>
        System.Threading.Tasks.Task<CDN> UnPublishAsync (string cdnId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// unPublish
        /// </summary>
        /// <remarks>
        /// unPublish
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CDN)</returns>
        System.Threading.Tasks.Task<ApiResponse<CDN>> UnPublishWithHttpInfoAsync (string cdnId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CdnApi : ICdnApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CdnApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CdnApi(String basePath)
        {
            this.Configuration = new Com.Gridly.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CdnApi"/> class
        /// </summary>
        /// <returns></returns>
        public CdnApi()
        {
            this.Configuration = Com.Gridly.Client.Configuration.Default;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CdnApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CdnApi(Com.Gridly.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.Gridly.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 128)</param>
        /// <param name="ids">ids (optional)</param>
        /// <param name="published">published (optional)</param>
        /// <returns>List<CDN></returns>
        public List<CDN> List (string gridId, int? offset = default(int?), int? limit = default(int?), List<string> ids = default(List<string>), bool? published = default(bool?))
        {
             ApiResponse<List<CDN>> localVarResponse = ListWithHttpInfo(gridId, offset, limit, ids, published);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 128)</param>
        /// <param name="ids">ids (optional)</param>
        /// <param name="published">published (optional)</param>
        /// <returns>ApiResponse of List<CDN></returns>
        public ApiResponse<List<CDN>> ListWithHttpInfo (string gridId, int? offset = default(int?), int? limit = default(int?), List<string> ids = default(List<string>), bool? published = default(bool?))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling CdnApi->List");

            var localVarPath = "/v1/cdns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (gridId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gridId", gridId)); // query parameter
            if (published != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "published", published)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CDN>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CDN>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CDN>)));
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 128)</param>
        /// <param name="ids">ids (optional)</param>
        /// <param name="published">published (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CDN></returns>
        public async System.Threading.Tasks.Task<List<CDN>> ListAsync (string gridId, int? offset = default(int?), int? limit = default(int?), List<string> ids = default(List<string>), bool? published = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CDN>> localVarResponse = await ListWithHttpInfoAsync(gridId, offset, limit, ids, published, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 128)</param>
        /// <param name="ids">ids (optional)</param>
        /// <param name="published">published (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CDN&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CDN>>> ListWithHttpInfoAsync (string gridId, int? offset = default(int?), int? limit = default(int?), List<string> ids = default(List<string>), bool? published = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling CdnApi->List");

            var localVarPath = "/v1/cdns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (gridId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gridId", gridId)); // query parameter
            if (published != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "published", published)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CDN>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CDN>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CDN>)));
        }

        /// <summary>
        /// publish publish
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <returns>CDN</returns>
        public CDN Publish (string cdnId)
        {
             ApiResponse<CDN> localVarResponse = PublishWithHttpInfo(cdnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// publish publish
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <returns>ApiResponse of CDN</returns>
        public ApiResponse<CDN> PublishWithHttpInfo (string cdnId)
        {
            // verify the required parameter 'cdnId' is set
            if (cdnId == null)
                throw new ApiException(400, "Missing required parameter 'cdnId' when calling CdnApi->Publish");

            var localVarPath = "/v1/cdns/{cdnId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdnId != null) localVarPathParams.Add("cdnId", this.Configuration.ApiClient.ParameterToString(cdnId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Publish", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CDN>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CDN) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CDN)));
        }

        /// <summary>
        /// publish publish
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CDN</returns>
        public async System.Threading.Tasks.Task<CDN> PublishAsync (string cdnId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CDN> localVarResponse = await PublishWithHttpInfoAsync(cdnId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// publish publish
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CDN)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CDN>> PublishWithHttpInfoAsync (string cdnId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'cdnId' is set
            if (cdnId == null)
                throw new ApiException(400, "Missing required parameter 'cdnId' when calling CdnApi->Publish");

            var localVarPath = "/v1/cdns/{cdnId}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdnId != null) localVarPathParams.Add("cdnId", this.Configuration.ApiClient.ParameterToString(cdnId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Publish", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CDN>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CDN) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CDN)));
        }

        /// <summary>
        /// unPublish unPublish
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <returns>CDN</returns>
        public CDN UnPublish (string cdnId)
        {
             ApiResponse<CDN> localVarResponse = UnPublishWithHttpInfo(cdnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// unPublish unPublish
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <returns>ApiResponse of CDN</returns>
        public ApiResponse<CDN> UnPublishWithHttpInfo (string cdnId)
        {
            // verify the required parameter 'cdnId' is set
            if (cdnId == null)
                throw new ApiException(400, "Missing required parameter 'cdnId' when calling CdnApi->UnPublish");

            var localVarPath = "/v1/cdns/{cdnId}/unpublish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdnId != null) localVarPathParams.Add("cdnId", this.Configuration.ApiClient.ParameterToString(cdnId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnPublish", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CDN>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CDN) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CDN)));
        }

        /// <summary>
        /// unPublish unPublish
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CDN</returns>
        public async System.Threading.Tasks.Task<CDN> UnPublishAsync (string cdnId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CDN> localVarResponse = await UnPublishWithHttpInfoAsync(cdnId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// unPublish unPublish
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdnId">cdnId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CDN)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CDN>> UnPublishWithHttpInfoAsync (string cdnId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'cdnId' is set
            if (cdnId == null)
                throw new ApiException(400, "Missing required parameter 'cdnId' when calling CdnApi->UnPublish");

            var localVarPath = "/v1/cdns/{cdnId}/unpublish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdnId != null) localVarPathParams.Add("cdnId", this.Configuration.ApiClient.ParameterToString(cdnId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnPublish", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CDN>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CDN) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CDN)));
        }

    }
}
