/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.27.1
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <returns>List<Record></returns>
        List<Record> Create (string viewId, List<SetRecord> createRecords);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <returns>ApiResponse of List<Record></returns>
        ApiResponse<List<Record>> CreateWithHttpInfo (string viewId, List<SetRecord> createRecords);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <returns></returns>
        void Delete (string viewId, DeleteRecord deleteRecord);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string viewId, DeleteRecord deleteRecord);
        /// <summary>
        /// fetch
        /// </summary>
        /// <remarks>
        /// fetch
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <returns>List<Record></returns>
        List<Record> Fetch (string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string));

        /// <summary>
        /// fetch
        /// </summary>
        /// <remarks>
        /// fetch
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <returns>ApiResponse of List<Record></returns>
        ApiResponse<List<Record>> FetchWithHttpInfo (string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string));
        /// <summary>
        /// fetchHistories
        /// </summary>
        /// <remarks>
        /// fetchHistories
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <returns>List<RecordHistory></returns>
        List<RecordHistory> FetchHistories (string viewId, string recordId, string page = default(string));

        /// <summary>
        /// fetchHistories
        /// </summary>
        /// <remarks>
        /// fetchHistories
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <returns>ApiResponse of List<RecordHistory></returns>
        ApiResponse<List<RecordHistory>> FetchHistoriesWithHttpInfo (string viewId, string recordId, string page = default(string));
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <returns>List<Record></returns>
        List<Record> Update (string viewId, List<SetRecord> setRecord);

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <returns>ApiResponse of List<Record></returns>
        ApiResponse<List<Record>> UpdateWithHttpInfo (string viewId, List<SetRecord> setRecord);
        /// <summary>
        /// updateRecord
        /// </summary>
        /// <remarks>
        /// updateRecord
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <returns>Record</returns>
        Record UpdateRecord (string id, string viewId, SetRecord setRecord, string path = default(string));

        /// <summary>
        /// updateRecord
        /// </summary>
        /// <remarks>
        /// updateRecord
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <returns>ApiResponse of Record</returns>
        ApiResponse<Record> UpdateRecordWithHttpInfo (string id, string viewId, SetRecord setRecord, string path = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Record></returns>
        System.Threading.Tasks.Task<List<Record>> CreateAsync (string viewId, List<SetRecord> createRecords, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Record>>> CreateWithHttpInfoAsync (string viewId, List<SetRecord> createRecords, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string viewId, DeleteRecord deleteRecord, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string viewId, DeleteRecord deleteRecord, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// fetch
        /// </summary>
        /// <remarks>
        /// fetch
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Record></returns>
        System.Threading.Tasks.Task<List<Record>> FetchAsync (string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// fetch
        /// </summary>
        /// <remarks>
        /// fetch
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Record>>> FetchWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// fetchHistories
        /// </summary>
        /// <remarks>
        /// fetchHistories
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<RecordHistory></returns>
        System.Threading.Tasks.Task<List<RecordHistory>> FetchHistoriesAsync (string viewId, string recordId, string page = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// fetchHistories
        /// </summary>
        /// <remarks>
        /// fetchHistories
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;RecordHistory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecordHistory>>> FetchHistoriesWithHttpInfoAsync (string viewId, string recordId, string page = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Record></returns>
        System.Threading.Tasks.Task<List<Record>> UpdateAsync (string viewId, List<SetRecord> setRecord, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Record>>> UpdateWithHttpInfoAsync (string viewId, List<SetRecord> setRecord, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// updateRecord
        /// </summary>
        /// <remarks>
        /// updateRecord
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Record</returns>
        System.Threading.Tasks.Task<Record> UpdateRecordAsync (string id, string viewId, SetRecord setRecord, string path = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// updateRecord
        /// </summary>
        /// <remarks>
        /// updateRecord
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Record)</returns>
        System.Threading.Tasks.Task<ApiResponse<Record>> UpdateRecordWithHttpInfoAsync (string id, string viewId, SetRecord setRecord, string path = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordApi : IRecordApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordApi(String basePath)
        {
            this.Configuration = new Com.Gridly.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordApi"/> class
        /// </summary>
        /// <returns></returns>
        public RecordApi()
        {
            this.Configuration = Com.Gridly.Client.Configuration.Default;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordApi(Com.Gridly.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.Gridly.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <returns>List<Record></returns>
        public List<Record> Create (string viewId, List<SetRecord> createRecords)
        {
             ApiResponse<List<Record>> localVarResponse = CreateWithHttpInfo(viewId, createRecords);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <returns>ApiResponse of List<Record></returns>
        public ApiResponse<List<Record>> CreateWithHttpInfo (string viewId, List<SetRecord> createRecords)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Create");
            // verify the required parameter 'createRecords' is set
            if (createRecords == null)
                throw new ApiException(400, "Missing required parameter 'createRecords' when calling RecordApi->Create");

            var localVarPath = "/v1/views/{viewId}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (createRecords != null && createRecords.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createRecords); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createRecords; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Record>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Record>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Record>)));
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Record></returns>
        public async System.Threading.Tasks.Task<List<Record>> CreateAsync (string viewId, List<SetRecord> createRecords, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Record>> localVarResponse = await CreateWithHttpInfoAsync(viewId, createRecords, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Record>>> CreateWithHttpInfoAsync (string viewId, List<SetRecord> createRecords, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Create");
            // verify the required parameter 'createRecords' is set
            if (createRecords == null)
                throw new ApiException(400, "Missing required parameter 'createRecords' when calling RecordApi->Create");

            var localVarPath = "/v1/views/{viewId}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (createRecords != null && createRecords.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createRecords); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createRecords; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Record>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Record>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Record>)));
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <returns></returns>
        public void Delete (string viewId, DeleteRecord deleteRecord)
        {
             DeleteWithHttpInfo(viewId, deleteRecord);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string viewId, DeleteRecord deleteRecord)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Delete");
            // verify the required parameter 'deleteRecord' is set
            if (deleteRecord == null)
                throw new ApiException(400, "Missing required parameter 'deleteRecord' when calling RecordApi->Delete");

            var localVarPath = "/v1/views/{viewId}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (deleteRecord != null && deleteRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteRecord; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string viewId, DeleteRecord deleteRecord, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteWithHttpInfoAsync(viewId, deleteRecord, cancellationToken);

        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string viewId, DeleteRecord deleteRecord, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Delete");
            // verify the required parameter 'deleteRecord' is set
            if (deleteRecord == null)
                throw new ApiException(400, "Missing required parameter 'deleteRecord' when calling RecordApi->Delete");

            var localVarPath = "/v1/views/{viewId}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (deleteRecord != null && deleteRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteRecord; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// fetch fetch
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <returns>List<Record></returns>
        public List<Record> Fetch (string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string))
        {
             ApiResponse<List<Record>> localVarResponse = FetchWithHttpInfo(viewId, columnIds, page, query, sort, fetchFileOption, afterRecordId, beforeRecordId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// fetch fetch
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <returns>ApiResponse of List<Record></returns>
        public ApiResponse<List<Record>> FetchWithHttpInfo (string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Fetch");

            var localVarPath = "/v1/views/{viewId}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (fetchFileOption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fetchFileOption", fetchFileOption)); // query parameter
            if (afterRecordId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "afterRecordId", afterRecordId)); // query parameter
            if (beforeRecordId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeRecordId", beforeRecordId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Fetch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Record>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Record>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Record>)));
        }

        /// <summary>
        /// fetch fetch
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Record></returns>
        public async System.Threading.Tasks.Task<List<Record>> FetchAsync (string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Record>> localVarResponse = await FetchWithHttpInfoAsync(viewId, columnIds, page, query, sort, fetchFileOption, afterRecordId, beforeRecordId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// fetch fetch
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Record>>> FetchWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Fetch");

            var localVarPath = "/v1/views/{viewId}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (fetchFileOption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fetchFileOption", fetchFileOption)); // query parameter
            if (afterRecordId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "afterRecordId", afterRecordId)); // query parameter
            if (beforeRecordId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeRecordId", beforeRecordId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Fetch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Record>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Record>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Record>)));
        }

        /// <summary>
        /// fetchHistories fetchHistories
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <returns>List<RecordHistory></returns>
        public List<RecordHistory> FetchHistories (string viewId, string recordId, string page = default(string))
        {
             ApiResponse<List<RecordHistory>> localVarResponse = FetchHistoriesWithHttpInfo(viewId, recordId, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// fetchHistories fetchHistories
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <returns>ApiResponse of List<RecordHistory></returns>
        public ApiResponse<List<RecordHistory>> FetchHistoriesWithHttpInfo (string viewId, string recordId, string page = default(string))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->FetchHistories");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordApi->FetchHistories");

            var localVarPath = "/v1/views/{viewId}/records/{recordId}/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RecordHistory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RecordHistory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RecordHistory>)));
        }

        /// <summary>
        /// fetchHistories fetchHistories
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<RecordHistory></returns>
        public async System.Threading.Tasks.Task<List<RecordHistory>> FetchHistoriesAsync (string viewId, string recordId, string page = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<RecordHistory>> localVarResponse = await FetchHistoriesWithHttpInfoAsync(viewId, recordId, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// fetchHistories fetchHistories
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;RecordHistory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RecordHistory>>> FetchHistoriesWithHttpInfoAsync (string viewId, string recordId, string page = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->FetchHistories");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordApi->FetchHistories");

            var localVarPath = "/v1/views/{viewId}/records/{recordId}/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RecordHistory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RecordHistory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RecordHistory>)));
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <returns>List<Record></returns>
        public List<Record> Update (string viewId, List<SetRecord> setRecord)
        {
             ApiResponse<List<Record>> localVarResponse = UpdateWithHttpInfo(viewId, setRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <returns>ApiResponse of List<Record></returns>
        public ApiResponse<List<Record>> UpdateWithHttpInfo (string viewId, List<SetRecord> setRecord)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Update");
            // verify the required parameter 'setRecord' is set
            if (setRecord == null)
                throw new ApiException(400, "Missing required parameter 'setRecord' when calling RecordApi->Update");

            var localVarPath = "/v1/views/{viewId}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (setRecord != null && setRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setRecord; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Record>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Record>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Record>)));
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Record></returns>
        public async System.Threading.Tasks.Task<List<Record>> UpdateAsync (string viewId, List<SetRecord> setRecord, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Record>> localVarResponse = await UpdateWithHttpInfoAsync(viewId, setRecord, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Record>>> UpdateWithHttpInfoAsync (string viewId, List<SetRecord> setRecord, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Update");
            // verify the required parameter 'setRecord' is set
            if (setRecord == null)
                throw new ApiException(400, "Missing required parameter 'setRecord' when calling RecordApi->Update");

            var localVarPath = "/v1/views/{viewId}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (setRecord != null && setRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setRecord; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Record>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Record>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Record>)));
        }

        /// <summary>
        /// updateRecord updateRecord
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <returns>Record</returns>
        public Record UpdateRecord (string id, string viewId, SetRecord setRecord, string path = default(string))
        {
             ApiResponse<Record> localVarResponse = UpdateRecordWithHttpInfo(id, viewId, setRecord, path);
             return localVarResponse.Data;
        }

        /// <summary>
        /// updateRecord updateRecord
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <returns>ApiResponse of Record</returns>
        public ApiResponse<Record> UpdateRecordWithHttpInfo (string id, string viewId, SetRecord setRecord, string path = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordApi->UpdateRecord");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->UpdateRecord");
            // verify the required parameter 'setRecord' is set
            if (setRecord == null)
                throw new ApiException(400, "Missing required parameter 'setRecord' when calling RecordApi->UpdateRecord");

            var localVarPath = "/v1/views/{viewId}/records/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (setRecord != null && setRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setRecord; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Record>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Record) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Record)));
        }

        /// <summary>
        /// updateRecord updateRecord
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Record</returns>
        public async System.Threading.Tasks.Task<Record> UpdateRecordAsync (string id, string viewId, SetRecord setRecord, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Record> localVarResponse = await UpdateRecordWithHttpInfoAsync(id, viewId, setRecord, path, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updateRecord updateRecord
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Record)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Record>> UpdateRecordWithHttpInfoAsync (string id, string viewId, SetRecord setRecord, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordApi->UpdateRecord");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->UpdateRecord");
            // verify the required parameter 'setRecord' is set
            if (setRecord == null)
                throw new ApiException(400, "Missing required parameter 'setRecord' when calling RecordApi->UpdateRecord");

            var localVarPath = "/v1/views/{viewId}/records/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (setRecord != null && setRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setRecord; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Record>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Record) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Record)));
        }

    }
}
