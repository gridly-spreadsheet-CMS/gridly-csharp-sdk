/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.27.1
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewColumnApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ViewColumn</returns>
        ViewColumn Add (string columnId, string viewId);

        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        ApiResponse<ViewColumn> AddWithHttpInfo (string columnId, string viewId);
        /// <summary>
        /// bulkCreate
        /// </summary>
        /// <remarks>
        /// bulkCreate
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <returns>List<ViewColumn></returns>
        List<ViewColumn> BulkCreate (string viewId, List<CreateColumn> createColumn);

        /// <summary>
        /// bulkCreate
        /// </summary>
        /// <remarks>
        /// bulkCreate
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <returns>ApiResponse of List<ViewColumn></returns>
        ApiResponse<List<ViewColumn>> BulkCreateWithHttpInfo (string viewId, List<CreateColumn> createColumn);
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Column
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <returns>ViewColumn</returns>
        ViewColumn Create (string viewId, CreateColumn createColumn);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Column
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <returns>ApiResponse of ViewColumn</returns>
        ApiResponse<ViewColumn> CreateWithHttpInfo (string viewId, CreateColumn createColumn);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns></returns>
        void Delete (string columnId, string viewId);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string columnId, string viewId);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ViewColumn</returns>
        ViewColumn Get (string columnId, string viewId);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        ApiResponse<ViewColumn> GetWithHttpInfo (string columnId, string viewId);
        /// <summary>
        /// remove
        /// </summary>
        /// <remarks>
        /// remove
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns></returns>
        void Remove (string columnId, string viewId);

        /// <summary>
        /// remove
        /// </summary>
        /// <remarks>
        /// remove
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveWithHttpInfo (string columnId, string viewId);
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <returns>ViewColumn</returns>
        ViewColumn Update (string columnId, string viewId, UpdateColumn updateColumn);

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <returns>ApiResponse of ViewColumn</returns>
        ApiResponse<ViewColumn> UpdateWithHttpInfo (string columnId, string viewId, UpdateColumn updateColumn);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewColumn</returns>
        System.Threading.Tasks.Task<ViewColumn> AddAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewColumn>> AddWithHttpInfoAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// bulkCreate
        /// </summary>
        /// <remarks>
        /// bulkCreate
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ViewColumn></returns>
        System.Threading.Tasks.Task<List<ViewColumn>> BulkCreateAsync (string viewId, List<CreateColumn> createColumn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// bulkCreate
        /// </summary>
        /// <remarks>
        /// bulkCreate
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ViewColumn&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ViewColumn>>> BulkCreateWithHttpInfoAsync (string viewId, List<CreateColumn> createColumn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Column
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewColumn</returns>
        System.Threading.Tasks.Task<ViewColumn> CreateAsync (string viewId, CreateColumn createColumn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Column
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewColumn>> CreateWithHttpInfoAsync (string viewId, CreateColumn createColumn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewColumn</returns>
        System.Threading.Tasks.Task<ViewColumn> GetAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewColumn>> GetWithHttpInfoAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// remove
        /// </summary>
        /// <remarks>
        /// remove
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// remove
        /// </summary>
        /// <remarks>
        /// remove
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveWithHttpInfoAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewColumn</returns>
        System.Threading.Tasks.Task<ViewColumn> UpdateAsync (string columnId, string viewId, UpdateColumn updateColumn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewColumn>> UpdateWithHttpInfoAsync (string columnId, string viewId, UpdateColumn updateColumn, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewColumnApi : IViewColumnApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewColumnApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewColumnApi(String basePath)
        {
            this.Configuration = new Com.Gridly.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewColumnApi"/> class
        /// </summary>
        /// <returns></returns>
        public ViewColumnApi()
        {
            this.Configuration = Com.Gridly.Client.Configuration.Default;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewColumnApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewColumnApi(Com.Gridly.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.Gridly.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ViewColumn</returns>
        public ViewColumn Add (string columnId, string viewId)
        {
             ApiResponse<ViewColumn> localVarResponse = AddWithHttpInfo(columnId, viewId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        public ApiResponse<ViewColumn> AddWithHttpInfo (string columnId, string viewId)
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Add");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Add");

            var localVarPath = "/v1/views/{viewId}/columns/{columnId}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columnId != null) localVarPathParams.Add("columnId", this.Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Add", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewColumn)));
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewColumn</returns>
        public async System.Threading.Tasks.Task<ViewColumn> AddAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewColumn> localVarResponse = await AddWithHttpInfoAsync(columnId, viewId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewColumn>> AddWithHttpInfoAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Add");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Add");

            var localVarPath = "/v1/views/{viewId}/columns/{columnId}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columnId != null) localVarPathParams.Add("columnId", this.Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Add", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewColumn)));
        }

        /// <summary>
        /// bulkCreate bulkCreate
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <returns>List<ViewColumn></returns>
        public List<ViewColumn> BulkCreate (string viewId, List<CreateColumn> createColumn)
        {
             ApiResponse<List<ViewColumn>> localVarResponse = BulkCreateWithHttpInfo(viewId, createColumn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// bulkCreate bulkCreate
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <returns>ApiResponse of List<ViewColumn></returns>
        public ApiResponse<List<ViewColumn>> BulkCreateWithHttpInfo (string viewId, List<CreateColumn> createColumn)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->BulkCreate");
            // verify the required parameter 'createColumn' is set
            if (createColumn == null)
                throw new ApiException(400, "Missing required parameter 'createColumn' when calling ViewColumnApi->BulkCreate");

            var localVarPath = "/v1/views/{viewId}/columns/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (createColumn != null && createColumn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createColumn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createColumn; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ViewColumn>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ViewColumn>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ViewColumn>)));
        }

        /// <summary>
        /// bulkCreate bulkCreate
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ViewColumn></returns>
        public async System.Threading.Tasks.Task<List<ViewColumn>> BulkCreateAsync (string viewId, List<CreateColumn> createColumn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ViewColumn>> localVarResponse = await BulkCreateWithHttpInfoAsync(viewId, createColumn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// bulkCreate bulkCreate
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ViewColumn&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ViewColumn>>> BulkCreateWithHttpInfoAsync (string viewId, List<CreateColumn> createColumn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->BulkCreate");
            // verify the required parameter 'createColumn' is set
            if (createColumn == null)
                throw new ApiException(400, "Missing required parameter 'createColumn' when calling ViewColumnApi->BulkCreate");

            var localVarPath = "/v1/views/{viewId}/columns/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (createColumn != null && createColumn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createColumn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createColumn; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ViewColumn>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ViewColumn>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ViewColumn>)));
        }

        /// <summary>
        /// create Create a Column
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <returns>ViewColumn</returns>
        public ViewColumn Create (string viewId, CreateColumn createColumn)
        {
             ApiResponse<ViewColumn> localVarResponse = CreateWithHttpInfo(viewId, createColumn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create Create a Column
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <returns>ApiResponse of ViewColumn</returns>
        public ApiResponse<ViewColumn> CreateWithHttpInfo (string viewId, CreateColumn createColumn)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Create");
            // verify the required parameter 'createColumn' is set
            if (createColumn == null)
                throw new ApiException(400, "Missing required parameter 'createColumn' when calling ViewColumnApi->Create");

            var localVarPath = "/v1/views/{viewId}/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (createColumn != null && createColumn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createColumn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createColumn; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewColumn)));
        }

        /// <summary>
        /// create Create a Column
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewColumn</returns>
        public async System.Threading.Tasks.Task<ViewColumn> CreateAsync (string viewId, CreateColumn createColumn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewColumn> localVarResponse = await CreateWithHttpInfoAsync(viewId, createColumn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create Create a Column
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewColumn>> CreateWithHttpInfoAsync (string viewId, CreateColumn createColumn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Create");
            // verify the required parameter 'createColumn' is set
            if (createColumn == null)
                throw new ApiException(400, "Missing required parameter 'createColumn' when calling ViewColumnApi->Create");

            var localVarPath = "/v1/views/{viewId}/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (createColumn != null && createColumn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createColumn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createColumn; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewColumn)));
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns></returns>
        public void Delete (string columnId, string viewId)
        {
             DeleteWithHttpInfo(columnId, viewId);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string columnId, string viewId)
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Delete");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Delete");

            var localVarPath = "/v1/views/{viewId}/columns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columnId != null) localVarPathParams.Add("columnId", this.Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteWithHttpInfoAsync(columnId, viewId, cancellationToken);

        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Delete");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Delete");

            var localVarPath = "/v1/views/{viewId}/columns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columnId != null) localVarPathParams.Add("columnId", this.Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ViewColumn</returns>
        public ViewColumn Get (string columnId, string viewId)
        {
             ApiResponse<ViewColumn> localVarResponse = GetWithHttpInfo(columnId, viewId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        public ApiResponse<ViewColumn> GetWithHttpInfo (string columnId, string viewId)
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Get");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Get");

            var localVarPath = "/v1/views/{viewId}/columns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columnId != null) localVarPathParams.Add("columnId", this.Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewColumn)));
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewColumn</returns>
        public async System.Threading.Tasks.Task<ViewColumn> GetAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewColumn> localVarResponse = await GetWithHttpInfoAsync(columnId, viewId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewColumn>> GetWithHttpInfoAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Get");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Get");

            var localVarPath = "/v1/views/{viewId}/columns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columnId != null) localVarPathParams.Add("columnId", this.Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewColumn)));
        }

        /// <summary>
        /// remove remove
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns></returns>
        public void Remove (string columnId, string viewId)
        {
             RemoveWithHttpInfo(columnId, viewId);
        }

        /// <summary>
        /// remove remove
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveWithHttpInfo (string columnId, string viewId)
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Remove");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Remove");

            var localVarPath = "/v1/views/{viewId}/columns/{columnId}/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columnId != null) localVarPathParams.Add("columnId", this.Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// remove remove
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await RemoveWithHttpInfoAsync(columnId, viewId, cancellationToken);

        }

        /// <summary>
        /// remove remove
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveWithHttpInfoAsync (string columnId, string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Remove");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Remove");

            var localVarPath = "/v1/views/{viewId}/columns/{columnId}/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columnId != null) localVarPathParams.Add("columnId", this.Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <returns>ViewColumn</returns>
        public ViewColumn Update (string columnId, string viewId, UpdateColumn updateColumn)
        {
             ApiResponse<ViewColumn> localVarResponse = UpdateWithHttpInfo(columnId, viewId, updateColumn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <returns>ApiResponse of ViewColumn</returns>
        public ApiResponse<ViewColumn> UpdateWithHttpInfo (string columnId, string viewId, UpdateColumn updateColumn)
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Update");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Update");
            // verify the required parameter 'updateColumn' is set
            if (updateColumn == null)
                throw new ApiException(400, "Missing required parameter 'updateColumn' when calling ViewColumnApi->Update");

            var localVarPath = "/v1/views/{viewId}/columns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columnId != null) localVarPathParams.Add("columnId", this.Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (updateColumn != null && updateColumn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateColumn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateColumn; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewColumn)));
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewColumn</returns>
        public async System.Threading.Tasks.Task<ViewColumn> UpdateAsync (string columnId, string viewId, UpdateColumn updateColumn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewColumn> localVarResponse = await UpdateWithHttpInfoAsync(columnId, viewId, updateColumn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewColumn>> UpdateWithHttpInfoAsync (string columnId, string viewId, UpdateColumn updateColumn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Update");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Update");
            // verify the required parameter 'updateColumn' is set
            if (updateColumn == null)
                throw new ApiException(400, "Missing required parameter 'updateColumn' when calling ViewColumnApi->Update");

            var localVarPath = "/v1/views/{viewId}/columns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columnId != null) localVarPathParams.Add("columnId", this.Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (updateColumn != null && updateColumn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateColumn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateColumn; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewColumn)));
        }

    }
}
