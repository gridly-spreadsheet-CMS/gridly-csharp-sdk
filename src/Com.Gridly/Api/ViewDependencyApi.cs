/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewDependencyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createDependency"></param>
        /// <returns>Dependency</returns>
        Dependency Create (string viewId, CreateDependency createDependency);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createDependency"></param>
        /// <returns>ApiResponse of Dependency</returns>
        ApiResponse<Dependency> CreateWithHttpInfo (string viewId, CreateDependency createDependency);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteDependency"></param>
        /// <returns></returns>
        void Delete (string viewId, DeleteDependency deleteDependency);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteDependency"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string viewId, DeleteDependency deleteDependency);
        /// <summary>
        /// deleteById
        /// </summary>
        /// <remarks>
        /// deleteById
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="dependencyId">dependencyId</param>
        /// <returns></returns>
        void DeleteById (string viewId, string dependencyId);

        /// <summary>
        /// deleteById
        /// </summary>
        /// <remarks>
        /// deleteById
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="dependencyId">dependencyId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteByIdWithHttpInfo (string viewId, string dependencyId);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>Dependency</returns>
        Dependency Get (string dependencyId, string viewId);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of Dependency</returns>
        ApiResponse<Dependency> GetWithHttpInfo (string dependencyId, string viewId);
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <returns>List<Dependency></returns>
        List<Dependency> List (string viewId);

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of List<Dependency></returns>
        ApiResponse<List<Dependency>> ListWithHttpInfo (string viewId);
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateDependency"></param>
        /// <returns>Dependency</returns>
        Dependency Update (string dependencyId, string viewId, UpdateDependency updateDependency);

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateDependency"></param>
        /// <returns>ApiResponse of Dependency</returns>
        ApiResponse<Dependency> UpdateWithHttpInfo (string dependencyId, string viewId, UpdateDependency updateDependency);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dependency</returns>
        System.Threading.Tasks.Task<Dependency> CreateAsync (string viewId, CreateDependency createDependency, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dependency)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dependency>> CreateWithHttpInfoAsync (string viewId, CreateDependency createDependency, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string viewId, DeleteDependency deleteDependency, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string viewId, DeleteDependency deleteDependency, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// deleteById
        /// </summary>
        /// <remarks>
        /// deleteById
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteByIdAsync (string viewId, string dependencyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// deleteById
        /// </summary>
        /// <remarks>
        /// deleteById
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteByIdWithHttpInfoAsync (string viewId, string dependencyId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dependency</returns>
        System.Threading.Tasks.Task<Dependency> GetAsync (string dependencyId, string viewId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dependency)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dependency>> GetWithHttpInfoAsync (string dependencyId, string viewId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Dependency></returns>
        System.Threading.Tasks.Task<List<Dependency>> ListAsync (string viewId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Dependency&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dependency>>> ListWithHttpInfoAsync (string viewId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dependency</returns>
        System.Threading.Tasks.Task<Dependency> UpdateAsync (string dependencyId, string viewId, UpdateDependency updateDependency, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dependency)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dependency>> UpdateWithHttpInfoAsync (string dependencyId, string viewId, UpdateDependency updateDependency, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewDependencyApi : IViewDependencyApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewDependencyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewDependencyApi(String basePath)
        {
            this.Configuration = new Com.Gridly.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewDependencyApi"/> class
        /// </summary>
        /// <returns></returns>
        public ViewDependencyApi()
        {
            this.Configuration = Com.Gridly.Client.Configuration.Default;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewDependencyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewDependencyApi(Com.Gridly.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.Gridly.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createDependency"></param>
        /// <returns>Dependency</returns>
        public Dependency Create (string viewId, CreateDependency createDependency)
        {
             ApiResponse<Dependency> localVarResponse = CreateWithHttpInfo(viewId, createDependency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createDependency"></param>
        /// <returns>ApiResponse of Dependency</returns>
        public ApiResponse<Dependency> CreateWithHttpInfo (string viewId, CreateDependency createDependency)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->Create");
            // verify the required parameter 'createDependency' is set
            if (createDependency == null)
                throw new ApiException(400, "Missing required parameter 'createDependency' when calling ViewDependencyApi->Create");

            var localVarPath = "/v1/views/{viewId}/dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (createDependency != null && createDependency.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createDependency); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDependency; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dependency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dependency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dependency)));
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dependency</returns>
        public async System.Threading.Tasks.Task<Dependency> CreateAsync (string viewId, CreateDependency createDependency, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dependency> localVarResponse = await CreateWithHttpInfoAsync(viewId, createDependency, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dependency)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dependency>> CreateWithHttpInfoAsync (string viewId, CreateDependency createDependency, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->Create");
            // verify the required parameter 'createDependency' is set
            if (createDependency == null)
                throw new ApiException(400, "Missing required parameter 'createDependency' when calling ViewDependencyApi->Create");

            var localVarPath = "/v1/views/{viewId}/dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (createDependency != null && createDependency.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createDependency); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDependency; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dependency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dependency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dependency)));
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteDependency"></param>
        /// <returns></returns>
        public void Delete (string viewId, DeleteDependency deleteDependency)
        {
             DeleteWithHttpInfo(viewId, deleteDependency);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteDependency"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string viewId, DeleteDependency deleteDependency)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->Delete");
            // verify the required parameter 'deleteDependency' is set
            if (deleteDependency == null)
                throw new ApiException(400, "Missing required parameter 'deleteDependency' when calling ViewDependencyApi->Delete");

            var localVarPath = "/v1/views/{viewId}/dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (deleteDependency != null && deleteDependency.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteDependency); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteDependency; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string viewId, DeleteDependency deleteDependency, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteWithHttpInfoAsync(viewId, deleteDependency, cancellationToken);

        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string viewId, DeleteDependency deleteDependency, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->Delete");
            // verify the required parameter 'deleteDependency' is set
            if (deleteDependency == null)
                throw new ApiException(400, "Missing required parameter 'deleteDependency' when calling ViewDependencyApi->Delete");

            var localVarPath = "/v1/views/{viewId}/dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (deleteDependency != null && deleteDependency.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteDependency); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteDependency; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deleteById deleteById
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="dependencyId">dependencyId</param>
        /// <returns></returns>
        public void DeleteById (string viewId, string dependencyId)
        {
             DeleteByIdWithHttpInfo(viewId, dependencyId);
        }

        /// <summary>
        /// deleteById deleteById
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="dependencyId">dependencyId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteByIdWithHttpInfo (string viewId, string dependencyId)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->DeleteById");
            // verify the required parameter 'dependencyId' is set
            if (dependencyId == null)
                throw new ApiException(400, "Missing required parameter 'dependencyId' when calling ViewDependencyApi->DeleteById");

            var localVarPath = "/v1/views/{viewId}/dependencies/{dependencyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (dependencyId != null) localVarPathParams.Add("dependencyId", this.Configuration.ApiClient.ParameterToString(dependencyId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deleteById deleteById
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteByIdAsync (string viewId, string dependencyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteByIdWithHttpInfoAsync(viewId, dependencyId, cancellationToken);

        }

        /// <summary>
        /// deleteById deleteById
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteByIdWithHttpInfoAsync (string viewId, string dependencyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->DeleteById");
            // verify the required parameter 'dependencyId' is set
            if (dependencyId == null)
                throw new ApiException(400, "Missing required parameter 'dependencyId' when calling ViewDependencyApi->DeleteById");

            var localVarPath = "/v1/views/{viewId}/dependencies/{dependencyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (dependencyId != null) localVarPathParams.Add("dependencyId", this.Configuration.ApiClient.ParameterToString(dependencyId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>Dependency</returns>
        public Dependency Get (string dependencyId, string viewId)
        {
             ApiResponse<Dependency> localVarResponse = GetWithHttpInfo(dependencyId, viewId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of Dependency</returns>
        public ApiResponse<Dependency> GetWithHttpInfo (string dependencyId, string viewId)
        {
            // verify the required parameter 'dependencyId' is set
            if (dependencyId == null)
                throw new ApiException(400, "Missing required parameter 'dependencyId' when calling ViewDependencyApi->Get");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->Get");

            var localVarPath = "/v1/views/{viewId}/dependencies/{dependencyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dependencyId != null) localVarPathParams.Add("dependencyId", this.Configuration.ApiClient.ParameterToString(dependencyId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dependency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dependency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dependency)));
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dependency</returns>
        public async System.Threading.Tasks.Task<Dependency> GetAsync (string dependencyId, string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dependency> localVarResponse = await GetWithHttpInfoAsync(dependencyId, viewId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dependency)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dependency>> GetWithHttpInfoAsync (string dependencyId, string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'dependencyId' is set
            if (dependencyId == null)
                throw new ApiException(400, "Missing required parameter 'dependencyId' when calling ViewDependencyApi->Get");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->Get");

            var localVarPath = "/v1/views/{viewId}/dependencies/{dependencyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dependencyId != null) localVarPathParams.Add("dependencyId", this.Configuration.ApiClient.ParameterToString(dependencyId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dependency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dependency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dependency)));
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <returns>List<Dependency></returns>
        public List<Dependency> List (string viewId)
        {
             ApiResponse<List<Dependency>> localVarResponse = ListWithHttpInfo(viewId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of List<Dependency></returns>
        public ApiResponse<List<Dependency>> ListWithHttpInfo (string viewId)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->List");

            var localVarPath = "/v1/views/{viewId}/dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dependency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Dependency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dependency>)));
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Dependency></returns>
        public async System.Threading.Tasks.Task<List<Dependency>> ListAsync (string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Dependency>> localVarResponse = await ListWithHttpInfoAsync(viewId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Dependency&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Dependency>>> ListWithHttpInfoAsync (string viewId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->List");

            var localVarPath = "/v1/views/{viewId}/dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dependency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Dependency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dependency>)));
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateDependency"></param>
        /// <returns>Dependency</returns>
        public Dependency Update (string dependencyId, string viewId, UpdateDependency updateDependency)
        {
             ApiResponse<Dependency> localVarResponse = UpdateWithHttpInfo(dependencyId, viewId, updateDependency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateDependency"></param>
        /// <returns>ApiResponse of Dependency</returns>
        public ApiResponse<Dependency> UpdateWithHttpInfo (string dependencyId, string viewId, UpdateDependency updateDependency)
        {
            // verify the required parameter 'dependencyId' is set
            if (dependencyId == null)
                throw new ApiException(400, "Missing required parameter 'dependencyId' when calling ViewDependencyApi->Update");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->Update");
            // verify the required parameter 'updateDependency' is set
            if (updateDependency == null)
                throw new ApiException(400, "Missing required parameter 'updateDependency' when calling ViewDependencyApi->Update");

            var localVarPath = "/v1/views/{viewId}/dependencies/{dependencyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dependencyId != null) localVarPathParams.Add("dependencyId", this.Configuration.ApiClient.ParameterToString(dependencyId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (updateDependency != null && updateDependency.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateDependency); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateDependency; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dependency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dependency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dependency)));
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dependency</returns>
        public async System.Threading.Tasks.Task<Dependency> UpdateAsync (string dependencyId, string viewId, UpdateDependency updateDependency, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dependency> localVarResponse = await UpdateWithHttpInfoAsync(dependencyId, viewId, updateDependency, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dependencyId">dependencyId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateDependency"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dependency)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dependency>> UpdateWithHttpInfoAsync (string dependencyId, string viewId, UpdateDependency updateDependency, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'dependencyId' is set
            if (dependencyId == null)
                throw new ApiException(400, "Missing required parameter 'dependencyId' when calling ViewDependencyApi->Update");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewDependencyApi->Update");
            // verify the required parameter 'updateDependency' is set
            if (updateDependency == null)
                throw new ApiException(400, "Missing required parameter 'updateDependency' when calling ViewDependencyApi->Update");

            var localVarPath = "/v1/views/{viewId}/dependencies/{dependencyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dependencyId != null) localVarPathParams.Add("dependencyId", this.Configuration.ApiClient.ParameterToString(dependencyId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (updateDependency != null && updateDependency.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateDependency); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateDependency; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dependency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dependency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dependency)));
        }

    }
}
