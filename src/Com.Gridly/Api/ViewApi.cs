/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.27.1
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createView"></param>
        /// <returns>View</returns>
        View Create (CreateView createView);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createView"></param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> CreateWithHttpInfo (CreateView createView);
        /// <summary>
        /// export
        /// </summary>
        /// <remarks>
        /// export
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream Export (string viewId, List<string> columnIds = default(List<string>), ExportFileHeader? fileHeader = default(ExportFileHeader?), string query = default(string), string sort = default(string), string type = default(string));

        /// <summary>
        /// export
        /// </summary>
        /// <remarks>
        /// export
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ExportWithHttpInfo (string viewId, List<string> columnIds = default(List<string>), ExportFileHeader? fileHeader = default(ExportFileHeader?), string query = default(string), string sort = default(string), string type = default(string));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>View</returns>
        View Get (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> GetWithHttpInfo (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string));
        /// <summary>
        /// getStatistic
        /// </summary>
        /// <remarks>
        /// getStatistic
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <returns>ViewStatistic</returns>
        ViewStatistic GetStatistic (string viewId, List<string> columnIds = default(List<string>));

        /// <summary>
        /// getStatistic
        /// </summary>
        /// <remarks>
        /// getStatistic
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <returns>ApiResponse of ViewStatistic</returns>
        ApiResponse<ViewStatistic> GetStatisticWithHttpInfo (string viewId, List<string> columnIds = default(List<string>));
        /// <summary>
        /// importView
        /// </summary>
        /// <remarks>
        /// importView
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and json</param>
        /// <param name="importRequest">importRequest (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns></returns>
        void ImportView (string viewId, System.IO.Stream file, string importRequest = default(string), string type = default(string));

        /// <summary>
        /// importView
        /// </summary>
        /// <remarks>
        /// importView
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and json</param>
        /// <param name="importRequest">importRequest (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportViewWithHttpInfo (string viewId, System.IO.Stream file, string importRequest = default(string), string type = default(string));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>List<View></returns>
        List<View> List (string branchId = default(string), string gridId = default(string), string type = default(string));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>ApiResponse of List<View></returns>
        ApiResponse<List<View>> ListWithHttpInfo (string branchId = default(string), string gridId = default(string), string type = default(string));
        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>Task</returns>
        Task Merge (string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>));

        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> MergeWithHttpInfo (string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createView"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> CreateAsync (CreateView createView, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createView"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> CreateWithHttpInfoAsync (CreateView createView, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// export
        /// </summary>
        /// <remarks>
        /// export
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ExportAsync (string viewId, List<string> columnIds = default(List<string>), ExportFileHeader? fileHeader = default(ExportFileHeader?), string query = default(string), string sort = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// export
        /// </summary>
        /// <remarks>
        /// export
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ExportWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), ExportFileHeader? fileHeader = default(ExportFileHeader?), string query = default(string), string sort = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> GetAsync (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> GetWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// getStatistic
        /// </summary>
        /// <remarks>
        /// getStatistic
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewStatistic</returns>
        System.Threading.Tasks.Task<ViewStatistic> GetStatisticAsync (string viewId, List<string> columnIds = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getStatistic
        /// </summary>
        /// <remarks>
        /// getStatistic
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewStatistic)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewStatistic>> GetStatisticWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// importView
        /// </summary>
        /// <remarks>
        /// importView
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and json</param>
        /// <param name="importRequest">importRequest (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportViewAsync (string viewId, System.IO.Stream file, string importRequest = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// importView
        /// </summary>
        /// <remarks>
        /// importView
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and json</param>
        /// <param name="importRequest">importRequest (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportViewWithHttpInfoAsync (string viewId, System.IO.Stream file, string importRequest = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<View></returns>
        System.Threading.Tasks.Task<List<View>> ListAsync (string branchId = default(string), string gridId = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;View&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<View>>> ListWithHttpInfoAsync (string branchId = default(string), string gridId = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> MergeAsync (string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> MergeWithHttpInfoAsync (string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewApi : IViewApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewApi(String basePath)
        {
            this.Configuration = new Com.Gridly.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class
        /// </summary>
        /// <returns></returns>
        public ViewApi()
        {
            this.Configuration = Com.Gridly.Client.Configuration.Default;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewApi(Com.Gridly.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.Gridly.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createView"></param>
        /// <returns>View</returns>
        public View Create (CreateView createView)
        {
             ApiResponse<View> localVarResponse = CreateWithHttpInfo(createView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createView"></param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse<View> CreateWithHttpInfo (CreateView createView)
        {
            // verify the required parameter 'createView' is set
            if (createView == null)
                throw new ApiException(400, "Missing required parameter 'createView' when calling ViewApi->Create");

            var localVarPath = "/v1/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createView != null && createView.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createView); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createView; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createView"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> CreateAsync (CreateView createView, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<View> localVarResponse = await CreateWithHttpInfoAsync(createView, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createView"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> CreateWithHttpInfoAsync (CreateView createView, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'createView' is set
            if (createView == null)
                throw new ApiException(400, "Missing required parameter 'createView' when calling ViewApi->Create");

            var localVarPath = "/v1/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createView != null && createView.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createView); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createView; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// export export
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream Export (string viewId, List<string> columnIds = default(List<string>), ExportFileHeader? fileHeader = default(ExportFileHeader?), string query = default(string), string sort = default(string), string type = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = ExportWithHttpInfo(viewId, columnIds, fileHeader, query, sort, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// export export
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ExportWithHttpInfo (string viewId, List<string> columnIds = default(List<string>), ExportFileHeader? fileHeader = default(ExportFileHeader?), string query = default(string), string sort = default(string), string type = default(string))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Export");

            var localVarPath = "/v1/views/{viewId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter
            if (fileHeader != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fileHeader", fileHeader)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Export", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// export export
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ExportAsync (string viewId, List<string> columnIds = default(List<string>), ExportFileHeader? fileHeader = default(ExportFileHeader?), string query = default(string), string sort = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ExportWithHttpInfoAsync(viewId, columnIds, fileHeader, query, sort, type, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// export export
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ExportWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), ExportFileHeader? fileHeader = default(ExportFileHeader?), string query = default(string), string sort = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Export");

            var localVarPath = "/v1/views/{viewId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter
            if (fileHeader != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fileHeader", fileHeader)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Export", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>View</returns>
        public View Get (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string))
        {
             ApiResponse<View> localVarResponse = GetWithHttpInfo(viewId, columnIds, include, page, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse<View> GetWithHttpInfo (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Get");

            var localVarPath = "/v1/views/{viewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "include", include)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> GetAsync (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<View> localVarResponse = await GetWithHttpInfoAsync(viewId, columnIds, include, page, query, sort, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> GetWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Get");

            var localVarPath = "/v1/views/{viewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "include", include)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// getStatistic getStatistic
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <returns>ViewStatistic</returns>
        public ViewStatistic GetStatistic (string viewId, List<string> columnIds = default(List<string>))
        {
             ApiResponse<ViewStatistic> localVarResponse = GetStatisticWithHttpInfo(viewId, columnIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getStatistic getStatistic
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <returns>ApiResponse of ViewStatistic</returns>
        public ApiResponse<ViewStatistic> GetStatisticWithHttpInfo (string viewId, List<string> columnIds = default(List<string>))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->GetStatistic");

            var localVarPath = "/v1/views/{viewId}/statistic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatistic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewStatistic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewStatistic) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewStatistic)));
        }

        /// <summary>
        /// getStatistic getStatistic
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewStatistic</returns>
        public async System.Threading.Tasks.Task<ViewStatistic> GetStatisticAsync (string viewId, List<string> columnIds = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewStatistic> localVarResponse = await GetStatisticWithHttpInfoAsync(viewId, columnIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getStatistic getStatistic
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewStatistic)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewStatistic>> GetStatisticWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->GetStatistic");

            var localVarPath = "/v1/views/{viewId}/statistic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatistic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewStatistic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewStatistic) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewStatistic)));
        }

        /// <summary>
        /// importView importView
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and json</param>
        /// <param name="importRequest">importRequest (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns></returns>
        public void ImportView (string viewId, System.IO.Stream file, string importRequest = default(string), string type = default(string))
        {
             ImportViewWithHttpInfo(viewId, file, importRequest, type);
        }

        /// <summary>
        /// importView importView
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and json</param>
        /// <param name="importRequest">importRequest (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportViewWithHttpInfo (string viewId, System.IO.Stream file, string importRequest = default(string), string type = default(string))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ImportView");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling ViewApi->ImportView");

            var localVarPath = "/v1/views/{viewId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (importRequest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "importRequest", importRequest)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// importView importView
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and json</param>
        /// <param name="importRequest">importRequest (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportViewAsync (string viewId, System.IO.Stream file, string importRequest = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ImportViewWithHttpInfoAsync(viewId, file, importRequest, type, cancellationToken);

        }

        /// <summary>
        /// importView importView
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and json</param>
        /// <param name="importRequest">importRequest (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportViewWithHttpInfoAsync (string viewId, System.IO.Stream file, string importRequest = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ImportView");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling ViewApi->ImportView");

            var localVarPath = "/v1/views/{viewId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (importRequest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "importRequest", importRequest)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>List<View></returns>
        public List<View> List (string branchId = default(string), string gridId = default(string), string type = default(string))
        {
             ApiResponse<List<View>> localVarResponse = ListWithHttpInfo(branchId, gridId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>ApiResponse of List<View></returns>
        public ApiResponse<List<View>> ListWithHttpInfo (string branchId = default(string), string gridId = default(string), string type = default(string))
        {

            var localVarPath = "/v1/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (branchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "branchId", branchId)); // query parameter
            if (gridId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gridId", gridId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<View>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<View>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<View>)));
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<View></returns>
        public async System.Threading.Tasks.Task<List<View>> ListAsync (string branchId = default(string), string gridId = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<View>> localVarResponse = await ListWithHttpInfoAsync(branchId, gridId, type, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;View&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<View>>> ListWithHttpInfoAsync (string branchId = default(string), string gridId = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (branchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "branchId", branchId)); // query parameter
            if (gridId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gridId", gridId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<View>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<View>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<View>)));
        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>Task</returns>
        public Task Merge (string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>))
        {
             ApiResponse<Task> localVarResponse = MergeWithHttpInfo(destinationViewId, viewId, mergeRecordOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>ApiResponse of Task</returns>
        public ApiResponse<Task> MergeWithHttpInfo (string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>))
        {
            // verify the required parameter 'destinationViewId' is set
            if (destinationViewId == null)
                throw new ApiException(400, "Missing required parameter 'destinationViewId' when calling ViewApi->Merge");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Merge");

            var localVarPath = "/v1/views/{viewId}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (destinationViewId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationViewId", destinationViewId)); // query parameter
            if (mergeRecordOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mergeRecordOptions", mergeRecordOptions)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Merge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> MergeAsync (string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Task> localVarResponse = await MergeWithHttpInfoAsync(destinationViewId, viewId, mergeRecordOptions, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Task>> MergeWithHttpInfoAsync (string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'destinationViewId' is set
            if (destinationViewId == null)
                throw new ApiException(400, "Missing required parameter 'destinationViewId' when calling ViewApi->Merge");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Merge");

            var localVarPath = "/v1/views/{viewId}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (destinationViewId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationViewId", destinationViewId)); // query parameter
            if (mergeRecordOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mergeRecordOptions", mergeRecordOptions)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Merge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

    }
}
