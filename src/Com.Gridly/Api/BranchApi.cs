/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.33.0
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBranchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <returns>Branch</returns>
        Branch Create (CreateBranch createBranch, string gridId = default(string), string branchId = default(string));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <returns>ApiResponse of Branch</returns>
        ApiResponse<Branch> CreateWithHttpInfo (CreateBranch createBranch, string gridId = default(string), string branchId = default(string));
        /// <summary>
        /// createDiffCheck
        /// </summary>
        /// <remarks>
        /// createDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <returns>Task</returns>
        Task CreateDiffCheck (string sourceViewId, string destinationViewId);

        /// <summary>
        /// createDiffCheck
        /// </summary>
        /// <remarks>
        /// createDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> CreateDiffCheckWithHttpInfo (string sourceViewId, string destinationViewId);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns></returns>
        void Delete (string branchId);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string branchId);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>Branch</returns>
        Branch Get (string branchId);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>ApiResponse of Branch</returns>
        ApiResponse<Branch> GetWithHttpInfo (string branchId);
        /// <summary>
        /// getDiffCheck
        /// </summary>
        /// <remarks>
        /// getDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <returns>List<BranchDiffRecord></returns>
        List<BranchDiffRecord> GetDiffCheck (string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string));

        /// <summary>
        /// getDiffCheck
        /// </summary>
        /// <remarks>
        /// getDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <returns>ApiResponse of List<BranchDiffRecord></returns>
        ApiResponse<List<BranchDiffRecord>> GetDiffCheckWithHttpInfo (string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>List<Branch></returns>
        List<Branch> List (string gridId);

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of List<Branch></returns>
        ApiResponse<List<Branch>> ListWithHttpInfo (string gridId);
        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>Task</returns>
        Task Merge (string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>));

        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> MergeWithHttpInfo (string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Branch</returns>
        System.Threading.Tasks.Task<Branch> CreateAsync (CreateBranch createBranch, string gridId = default(string), string branchId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branch>> CreateWithHttpInfoAsync (CreateBranch createBranch, string gridId = default(string), string branchId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// createDiffCheck
        /// </summary>
        /// <remarks>
        /// createDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> CreateDiffCheckAsync (string sourceViewId, string destinationViewId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// createDiffCheck
        /// </summary>
        /// <remarks>
        /// createDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> CreateDiffCheckWithHttpInfoAsync (string sourceViewId, string destinationViewId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string branchId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string branchId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Branch</returns>
        System.Threading.Tasks.Task<Branch> GetAsync (string branchId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branch>> GetWithHttpInfoAsync (string branchId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// getDiffCheck
        /// </summary>
        /// <remarks>
        /// getDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<BranchDiffRecord></returns>
        System.Threading.Tasks.Task<List<BranchDiffRecord>> GetDiffCheckAsync (string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getDiffCheck
        /// </summary>
        /// <remarks>
        /// getDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;BranchDiffRecord&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BranchDiffRecord>>> GetDiffCheckWithHttpInfoAsync (string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Branch></returns>
        System.Threading.Tasks.Task<List<Branch>> ListAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Branch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Branch>>> ListWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> MergeAsync (string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> MergeWithHttpInfoAsync (string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BranchApi : IBranchApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BranchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BranchApi(String basePath)
        {
            this.Configuration = new Com.Gridly.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BranchApi"/> class
        /// </summary>
        /// <returns></returns>
        public BranchApi()
        {
            this.Configuration = Com.Gridly.Client.Configuration.Default;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BranchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BranchApi(Com.Gridly.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.Gridly.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <returns>Branch</returns>
        public Branch Create (CreateBranch createBranch, string gridId = default(string), string branchId = default(string))
        {
             ApiResponse<Branch> localVarResponse = CreateWithHttpInfo(createBranch, gridId, branchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <returns>ApiResponse of Branch</returns>
        public ApiResponse<Branch> CreateWithHttpInfo (CreateBranch createBranch, string gridId = default(string), string branchId = default(string))
        {
            // verify the required parameter 'createBranch' is set
            if (createBranch == null)
                throw new ApiException(400, "Missing required parameter 'createBranch' when calling BranchApi->Create");

            var localVarPath = "/v1/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gridId", gridId)); // query parameter
            if (branchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "branchId", branchId)); // query parameter
            if (createBranch != null && createBranch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createBranch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createBranch; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Branch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branch)));
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Branch</returns>
        public async System.Threading.Tasks.Task<Branch> CreateAsync (CreateBranch createBranch, string gridId = default(string), string branchId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Branch> localVarResponse = await CreateWithHttpInfoAsync(createBranch, gridId, branchId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Branch>> CreateWithHttpInfoAsync (CreateBranch createBranch, string gridId = default(string), string branchId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'createBranch' is set
            if (createBranch == null)
                throw new ApiException(400, "Missing required parameter 'createBranch' when calling BranchApi->Create");

            var localVarPath = "/v1/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gridId", gridId)); // query parameter
            if (branchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "branchId", branchId)); // query parameter
            if (createBranch != null && createBranch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createBranch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createBranch; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Branch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branch)));
        }

        /// <summary>
        /// createDiffCheck createDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <returns>Task</returns>
        public Task CreateDiffCheck (string sourceViewId, string destinationViewId)
        {
             ApiResponse<Task> localVarResponse = CreateDiffCheckWithHttpInfo(sourceViewId, destinationViewId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createDiffCheck createDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <returns>ApiResponse of Task</returns>
        public ApiResponse<Task> CreateDiffCheckWithHttpInfo (string sourceViewId, string destinationViewId)
        {
            // verify the required parameter 'sourceViewId' is set
            if (sourceViewId == null)
                throw new ApiException(400, "Missing required parameter 'sourceViewId' when calling BranchApi->CreateDiffCheck");
            // verify the required parameter 'destinationViewId' is set
            if (destinationViewId == null)
                throw new ApiException(400, "Missing required parameter 'destinationViewId' when calling BranchApi->CreateDiffCheck");

            var localVarPath = "/v1/branches/diffcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceViewId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceViewId", sourceViewId)); // query parameter
            if (destinationViewId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationViewId", destinationViewId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDiffCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// createDiffCheck createDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> CreateDiffCheckAsync (string sourceViewId, string destinationViewId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Task> localVarResponse = await CreateDiffCheckWithHttpInfoAsync(sourceViewId, destinationViewId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createDiffCheck createDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Task>> CreateDiffCheckWithHttpInfoAsync (string sourceViewId, string destinationViewId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sourceViewId' is set
            if (sourceViewId == null)
                throw new ApiException(400, "Missing required parameter 'sourceViewId' when calling BranchApi->CreateDiffCheck");
            // verify the required parameter 'destinationViewId' is set
            if (destinationViewId == null)
                throw new ApiException(400, "Missing required parameter 'destinationViewId' when calling BranchApi->CreateDiffCheck");

            var localVarPath = "/v1/branches/diffcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceViewId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceViewId", sourceViewId)); // query parameter
            if (destinationViewId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationViewId", destinationViewId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDiffCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns></returns>
        public void Delete (string branchId)
        {
             DeleteWithHttpInfo(branchId);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string branchId)
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Delete");

            var localVarPath = "/v1/branches/{branchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (branchId != null) localVarPathParams.Add("branchId", this.Configuration.ApiClient.ParameterToString(branchId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string branchId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteWithHttpInfoAsync(branchId, cancellationToken);

        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string branchId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Delete");

            var localVarPath = "/v1/branches/{branchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (branchId != null) localVarPathParams.Add("branchId", this.Configuration.ApiClient.ParameterToString(branchId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>Branch</returns>
        public Branch Get (string branchId)
        {
             ApiResponse<Branch> localVarResponse = GetWithHttpInfo(branchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>ApiResponse of Branch</returns>
        public ApiResponse<Branch> GetWithHttpInfo (string branchId)
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Get");

            var localVarPath = "/v1/branches/{branchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (branchId != null) localVarPathParams.Add("branchId", this.Configuration.ApiClient.ParameterToString(branchId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Branch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branch)));
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Branch</returns>
        public async System.Threading.Tasks.Task<Branch> GetAsync (string branchId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Branch> localVarResponse = await GetWithHttpInfoAsync(branchId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Branch>> GetWithHttpInfoAsync (string branchId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Get");

            var localVarPath = "/v1/branches/{branchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (branchId != null) localVarPathParams.Add("branchId", this.Configuration.ApiClient.ParameterToString(branchId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Branch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branch)));
        }

        /// <summary>
        /// getDiffCheck getDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <returns>List<BranchDiffRecord></returns>
        public List<BranchDiffRecord> GetDiffCheck (string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string))
        {
             ApiResponse<List<BranchDiffRecord>> localVarResponse = GetDiffCheckWithHttpInfo(taskId, mergeRecordOptions, query, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getDiffCheck getDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <returns>ApiResponse of List<BranchDiffRecord></returns>
        public ApiResponse<List<BranchDiffRecord>> GetDiffCheckWithHttpInfo (string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling BranchApi->GetDiffCheck");

            var localVarPath = "/v1/branches/diffcheck/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (mergeRecordOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mergeRecordOptions", mergeRecordOptions)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiffCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BranchDiffRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BranchDiffRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BranchDiffRecord>)));
        }

        /// <summary>
        /// getDiffCheck getDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<BranchDiffRecord></returns>
        public async System.Threading.Tasks.Task<List<BranchDiffRecord>> GetDiffCheckAsync (string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<BranchDiffRecord>> localVarResponse = await GetDiffCheckWithHttpInfoAsync(taskId, mergeRecordOptions, query, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getDiffCheck getDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;BranchDiffRecord&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BranchDiffRecord>>> GetDiffCheckWithHttpInfoAsync (string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling BranchApi->GetDiffCheck");

            var localVarPath = "/v1/branches/diffcheck/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (mergeRecordOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mergeRecordOptions", mergeRecordOptions)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiffCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BranchDiffRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BranchDiffRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BranchDiffRecord>)));
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>List<Branch></returns>
        public List<Branch> List (string gridId)
        {
             ApiResponse<List<Branch>> localVarResponse = ListWithHttpInfo(gridId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of List<Branch></returns>
        public ApiResponse<List<Branch>> ListWithHttpInfo (string gridId)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling BranchApi->List");

            var localVarPath = "/v1/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gridId", gridId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Branch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Branch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Branch>)));
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Branch></returns>
        public async System.Threading.Tasks.Task<List<Branch>> ListAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Branch>> localVarResponse = await ListWithHttpInfoAsync(gridId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Branch&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Branch>>> ListWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling BranchApi->List");

            var localVarPath = "/v1/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gridId", gridId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Branch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Branch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Branch>)));
        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>Task</returns>
        public Task Merge (string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>))
        {
             ApiResponse<Task> localVarResponse = MergeWithHttpInfo(branchId, destinationBranchId, mergeBranchRequest, mergeRecordOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>ApiResponse of Task</returns>
        public ApiResponse<Task> MergeWithHttpInfo (string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>))
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Merge");
            // verify the required parameter 'destinationBranchId' is set
            if (destinationBranchId == null)
                throw new ApiException(400, "Missing required parameter 'destinationBranchId' when calling BranchApi->Merge");
            // verify the required parameter 'mergeBranchRequest' is set
            if (mergeBranchRequest == null)
                throw new ApiException(400, "Missing required parameter 'mergeBranchRequest' when calling BranchApi->Merge");

            var localVarPath = "/v1/branches/{branchId}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (branchId != null) localVarPathParams.Add("branchId", this.Configuration.ApiClient.ParameterToString(branchId)); // path parameter
            if (destinationBranchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationBranchId", destinationBranchId)); // query parameter
            if (mergeRecordOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mergeRecordOptions", mergeRecordOptions)); // query parameter
            if (mergeBranchRequest != null && mergeBranchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mergeBranchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeBranchRequest; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Merge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> MergeAsync (string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Task> localVarResponse = await MergeWithHttpInfoAsync(branchId, destinationBranchId, mergeBranchRequest, mergeRecordOptions, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Task>> MergeWithHttpInfoAsync (string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Merge");
            // verify the required parameter 'destinationBranchId' is set
            if (destinationBranchId == null)
                throw new ApiException(400, "Missing required parameter 'destinationBranchId' when calling BranchApi->Merge");
            // verify the required parameter 'mergeBranchRequest' is set
            if (mergeBranchRequest == null)
                throw new ApiException(400, "Missing required parameter 'mergeBranchRequest' when calling BranchApi->Merge");

            var localVarPath = "/v1/branches/{branchId}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (branchId != null) localVarPathParams.Add("branchId", this.Configuration.ApiClient.ParameterToString(branchId)); // path parameter
            if (destinationBranchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationBranchId", destinationBranchId)); // query parameter
            if (mergeRecordOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mergeRecordOptions", mergeRecordOptions)); // query parameter
            if (mergeBranchRequest != null && mergeBranchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mergeBranchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeBranchRequest; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Merge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

    }
}
